<?xml version="1.0" encoding="UTF-8"?>
<form xmlns="http://www.w3.org/2002/06/xhtml2" xmlns:ix="http://itensil.com/ns/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:exf="http://www.exforms.org/exf/1-0" xmlns:xf="http://www.w3.org/2002/xforms"><xf:model id="fmodel"><xf:instance id="ins"><data xmlns=""></data></xf:instance><xf:instance id="meta"><data xmlns=""></data></xf:instance><xf:instance id="cats"><data xmlns=""></data></xf:instance><xf:instance id="form"><data xmlns=""><ping>0</ping><AMD/><form updatedBy="" updated="" createdBy="" created=""/><tempRevIndex>-1</tempRevIndex><tempSugIndex>1</tempSugIndex><searchText/><searchAddNew/><records/><fullSearchText/><fullSearchRecords/><col1/><col2/><col3/><document/><temp/><comp uri=""/></data></xf:instance><xf:instance id="bootstrap"><data xmlns=""><js>/resources/services/appForms/main.js</js></data></xf:instance><xf:instance id="config"><data xmlns=""></data></xf:instance><xf:instance id="baseOp"><data xmlns=""></data></xf:instance><script ev:event="xforms-model-construct-done">
      bootstrapSharedXfrm(model);
      model.Frm = new appForm(model, "setup");
       
          if(model.Frm.formSet.getRoot().__AMND){
          model.Frm.loadOpFile('ins', model.Frm.formSet.getRoot().__COMPREVURI, "1");
          }else{
          model.Frm.loadAppFile('ins', model.Frm.formSet.getRoot().__REVURI, "1");
          }      
        
          if(model.Frm.formSet.getRoot().__AMND){
          model.Frm.loadOpFile('review', model.Frm.formSet.getRoot().__COMPREVURI, "1");
          model.Frm.loadOpFile('ins', model.Frm.formSet.getRoot().__COMPREVURI, "1");
          }else{
          model.Frm.loadAppFile('review', model.Frm.formSet.getRoot().__REVURI, "1");
          }
          model.Frm.revewMode = -1;
        
        //model.Frm.loadAppFile('ins', "/data/irb.xml", "1");
        
        
    		  if(model.Frm.formSet.getRoot().__AMND){
            model.Frm.loadOpFile('ins', model.Frm.formSet.getRoot().__COMPREVURI, "1");
          }else{
            model.Frm.loadAppFile('ins', model.Frm.formSet.getRoot().__REVURI, "1");
          }
    		  model.Frm.loadAppFile('meta', "/data/projectData.xml", "0");model.Frm.loadAppFile('cats', "/data/catagories.xml", "0");
      model.Frm.loadMetaData();
      
      
        includeSharedJS("/resources/applications/IRB/js/clientSideFunctions.js");
        model.USA = new irbProtocol(model);
      
      model.refresh();
      model.rebuild();
      model.recalculate();
      </script><script ev:event="xforms-ready"/><xf:submission instance="ins" id="submitins" replace="none" method="put"><xf:action ev:event="xforms-submit-done"/><xf:action ev:event="xforms-submit-error"><xf:message level="ephemeral">Problem saving (ins)</xf:message></xf:action></xf:submission><xf:bind relevant="true()" readonly="false()" nodeset="instance(ins)//*"/><xf:bind relevant="true()" readonly="false()" nodeset="instance(meta)//*"/><xf:bind relevant="true()" readonly="false()" nodeset="instance(cats)//*"/><xf:bind readonly="true()" nodeset="//link/@title"/><xf:bind nodeset="instance('form')/document" type="ix:file"/></xf:model><ix:template name="QuickSearch"><div style="padding:8px;width:400px"><table style="width:240px"><tr><td><xf:input id="searchBox" ref="instance('form')/searchText" style="width:140px"><xf:label style="width:50px">Lookup:</xf:label></xf:input></td><td/></tr></table><hr/><xf:switch><xf:case exf:if="1" id="hide-quicksearch"/><xf:case id="show-quicksearch"><exf:variable name="records" value="instance('form')/records//rec"/><exf:variable name="pingVar" value="instance('form')/ping"/><div><ix:attr name="style" value="if($pingVar &gt; 0 and $pingVar &gt; 20, '', 'display:none')"/><h3><xf:output value="instance('form')/ping"/> records available, displaying the top 20 rows. Please use the Lookup box to search.</h3></div><div><ix:attr name="style" value="if($pingVar &gt; 0 and $pingVar &lt; 20, '', 'display:none')"/><h3><xf:output value="instance('form')/ping"/> records available, displaying <xf:output value="instance('form')/ping"/> rows. Please use the Lookup box to search.</h3></div><div><ix:attr name="style" value="if(count($records)=0, '', 'display:none')"/><h1>No Matches</h1></div><div><ix:attr value="if(count($records) &gt; 150, '', 'display:none')" name="style"/><h1>Too Many Matches</h1>Please refine your search.</div><table class="quickSearchMatches"><ix:attr value="if(count($records) &lt;= 500 and count($records) &gt; 0, '', 'display:none')" name="style"/><tr><th style="text-align:left;"><xf:output value="instance('form')/col1"/></th><th style="text-align:left;padding-left:20px"><xf:output value="instance('form')/col2"/></th><th style="text-align:left;padding-left:20px"><xf:output value="instance('form')/col3"/></th></tr><xf:repeat nodeset="$records"><tr><td style="vertical-align:top; width:33%"><u class="clickable"><xf:output value="(attribute::node())[position()=script('SH.is_ie ? 4 : 3')]"/><xf:close ev:event="click"/><script ev:event="click"> 
                              var indx = model.getValue("@id", contextNode);
                              var val = model.getValue("@name", contextNode);
                              if(val == "") val = model.getValue("(attribute::node())[position()=script('SH.is_ie ? 4 : 3')]", contextNode);
                              model.Frm.quickSearchSelect(indx, val);
                              var code = model.Frm.quickSearch.code;
                              if(code) eval(code);
                              if(model.Frm.quickSearch.save) model.Frm.saveAll();
                              event.stopPropagation();
                            </script></u></td><td style="vertical-align:top;padding-left:20px; width:30%"><xf:output value="if(instance('form')/col2 and instance('form')/col2 != '', (attribute::node())[position()=script('SH.is_ie ? 3 : 2')], '')"/></td><td style="vertical-align:top;padding-left:20px; width:30%"><xf:output value="if(instance('form')/col3 and instance('form')/col3 != '', (attribute::node())[position()=script('SH.is_ie ? 2 : 1')], '')"/></td></tr></xf:repeat></table><br/><br/></xf:case></xf:switch></div></ix:template><script ev:event="xforms-value-changed">model.USA.updateErrs('ins', 'recordTable');</script><div class="formFrame" id="allcontrols"><div style="display:none;"><xf:input id="documentDrop" ref="instance('form')/document"><xf:action ev:event="xforms-value-changed" exf:if="instance('form')/document != ''"><script> 
                var n = model.getValue(".", contextNode);
                if(n != "") model.Frm.linkFile(n);
              </script></xf:action></xf:input></div><table class="formMetaLine"><tr/></table><div class="body"><h1/><table class="basicColLayout"><tr class="yesnobuttons"><td class="component   widestLabel"><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/researchFunded" appearance="full" id="researchFunded"><xf:label>Funding Has Been Requested / Obtained</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/researchFunded" appearance="full" id="researchFunded"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			if(x == '0') {
				if(model.getValue("count(instance('ins')/fundingSourceComp)") * 1 != 0) {
					model.USA.removeALLFundingSources(["main2"]);
				}

				//Clear Financial Administration	
				var fDrugBiologics = model.getValue("instance('ins')/invDrugs",null);
				var finvDevice = model.getValue("instance('ins')/invDevs",null);
				var fClinicalTrial = model.getValue("instance('ins')/clinicalTrial",null);
				var finance = "0";
				if(fDrugBiologics == "1" || finvDevice == "1" || fClinicalTrial == "1") {
					finance = "1";
				} else {
					finance = "0";
				}
				if(finance != "1") {
					model.setValue("instance('ins')/FACTSClinicalResearchStudyCategory", "");
					model.setValue("instance('ins')/facts_payment_option", "");
					model.setValue("instance('ins')/facts_payment_option_1", "");
					model.setValue("instance('ins')/facts_payment_option_2", "");
					model.setValue("instance('ins')/facts_payment_option_5", "");
				}
			}
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/researchFunded = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="radiobuttons"><td class="component   widestLabel"><xf:select1 ref="instance('ins')/appType" appearance="full" id="appType"><xf:label>Application Type</xf:label><xf:repeat nodeset="instance('cats')/appType/type"><xf:item><xf:label><xf:output value="@name"/></xf:label><xf:value><xf:output value="@id"/></xf:value></xf:item></xf:repeat><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			y = model.getValue("instance('ins')/researchInvolves",contextNode);
			if(x != '3') {
				model.setValue("instance('ins')/externalIRBHIPAA", "");				
				
				//Clear External IRB tab
				model.setValue("instance('ins')/externalIRBName", "");
				model.setValue("instance('ins')/externalIRBOther", "");
				model.setValue("instance('ins')/externalIRBMultiCenterNotPI", "");
				model.setValue("instance('ins')/externalIRBMultiCenterConsortium", "");
				model.setValue("instance('ins')/externalIRBMultiCenterCentralIRB", "");
				model.setValue("instance('ins')/externalIRBPIRoleNotIncludeSubjects", "");
				model.setValue("instance('ins')/externalIRBFederalFunds", "");
				model.setValue("instance('ins')/externalIRBRequestFromFCOIR", "");
				model.setValue("instance('ins')/externalIRBRequestFromPPHS", "");
				model.setValue("instance('ins')/externalIRBHIVTesting", "");
				var dl3 = model.getValue("instance('ins')/externalIRBHIVConsent/@docLink",null);
				if(dl3) model.Frm.deleteDocumentRef(dl3, 'ins');
                model.setValue("instance('ins')/externalIRBHIVConsent/@uri", "");
				model.setValue("instance('ins')/externalIRBHIVConsent/@docLink", "");
                model.setValue("instance('ins')/externalIRBHIVConsent", "");
			}      	    
			if(x != '1') {
				model.setValue("instance('ins')/researchInvolves", "");
				model.setValue("instance('ins')/consentingParticipants", "");
				model.setValue("instance('ins')/useHUD", "");
				model.setValue("instance('ins')/requestingWaiverForAnyProcedures", "");
				model.setValue("instance('ins')/invDevs", "");
				model.setValue("instance('ins')/bankingSpecimens", "");				
				
				//Clear Summary - Backgraound tab
				model.setValue("instance('ins')/objective", "");
				model.setValue("instance('ins')/background", "");
				model.setValue("instance('ins')/primarySecondaryEndpoints", "");
				model.setValue("instance('ins')/previouslyApprovedISMMS", "");
				model.setValue("instance('ins')/prevISSMSProtocolNumber", "");
				model.setValue("instance('ins')/previouslySubmittedExternal", "");
				model.setValue("instance('ins')/previouslySubmittedExternalIRBName", "");
				model.setValue("instance('ins')/previouslyApprovedExternal", "");
				var dl3 = model.getValue("instance('ins')/previousApprovalDoc/@docLink",null);
				if(dl3) model.Frm.deleteDocumentRef(dl3, 'ins');
                model.setValue("instance('ins')/previousApprovalDoc/@uri", "");
				model.setValue("instance('ins')/previousApprovalDoc/@docLink", "");
                model.setValue("instance('ins')/previousApprovalDoc", "");
				model.setValue("instance('ins')/previouslySubmittedDetails", "");				
				
				//Clear Sites tab
				model.USA.removeALLExternalSites(["main2"]);
				
				//Clear Consent - Obtaining Consent
				model.setValue("instance('ins')/concentProcess", "");
				var dl1 = model.getValue("instance('ins')/consentDoc/@docLink",null);
				if(dl1) model.Frm.deleteDocumentRef(dl1, 'ins');
				model.setValue("instance('ins')/consentDoc/@uri", "");
				model.setValue("instance('ins')/consentDoc/@docLink", "");
				model.setValue("instance('ins')/consentDoc", "");
				model.setValue("instance('ins')/whereWhenConcent", "");
				model.setValue("instance('ins')/consentWaiting", "");
				model.setValue("instance('ins')/consentSOPHRP", "");
				model.setValue("instance('ins')/consentDescribe", "");
				model.setValue("instance('ins')/consentWritten", "");
				model.setValue("instance('ins')/enrollNonEnglishSpeaking", "");
				model.setValue("instance('ins')/languagesOtherThanEnglish", "");
				model.setValue("instance('ins')/languagesConsentProcess", "");
				model.setValue("instance('ins')/justificationNotEnrollingNonEnglishSpeaking", "");
				
				//Clear Consent - Parental Permission
				model.setValue("instance('ins')/consPermission", "");
				model.setValue("instance('ins')/waiveParentalCriteriaSet", "");
				model.setValue("instance('ins')/waiveParentalCriteriaSetJustify", "");
				var dl = model.getValue("instance('ins')/PPDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/PPDoc/@uri", "");
				model.setValue("instance('ins')/PPDoc/@docLink", "");
				model.setValue("instance('ins')/PPDoc", "");
				model.setValue("instance('ins')/assentPermission", "");
				model.setValue("instance('ins')/assentProcess", "");
				var dl1 = model.getValue("instance('ins')/assentForm/@docLink",null);
				if(dl1) model.Frm.deleteDocumentRef(dl1, 'ins');
				model.setValue("instance('ins')/assentForm/@uri", "");
				model.setValue("instance('ins')/assentForm/@docLink", "");
				model.setValue("instance('ins')/assentForm", "");
				model.setValue("instance('ins')/assentDocumentProcess", "");
				model.setValue("instance('ins')/assentDocumentDesc", "");
				model.setValue("instance('ins')/consCapability", "");
				model.setValue("instance('ins')/waiveAssentCriteriaSet", "");
				model.setValue("instance('ins')/waiveAssentCriteriaSetJustification", "");
				model.setValue("instance('ins')/designedBenefits", "");
				
				//Clear Consent - Legally Authorized Representative
				model.setValue("instance('ins')/indCapableOfConsent", "");
				model.setValue("instance('ins')/permissionList", "");
				model.setValue("instance('ins')/assentOfSubjects", "");
				
				//Clear Consent - Waiver of Informed Consent			
				model.setValue("instance('ins')/requestingWaiverFor", "");
				model.setValue("instance('ins')/consentWaiver", "");
				model.setValue("instance('ins')/noMoreThanMinRisk", "");
				model.setValue("instance('ins')/waiverNotAffectParticipants", "");
				model.setValue("instance('ins')/justifyWaiver", "");
				model.setValue("instance('ins')/provideAdditionalInformation", "");
				model.setValue("instance('ins')/describeAlterationConsent", "");
				model.setValue("instance('ins')/justifyAlterationConsent", "");
				
				//Clear Consent - Waiver of Signed Consent
				model.setValue("instance('ins')/identJustification", "");
				model.setValue("instance('ins')/waiverOfSignedConsentJustification", "");
				
				//Clear Consent - Documents
				var nl = model.selectNodeList("instance('ins')/consentDocs", null);
				for(var m = 0; m &lt; nl.length; m++) {
					var dl = model.getValue("instance('ins')/consentDocs["+(m + 1)+"]/document/@docLink", null);
					if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				}
				for(var m = 0; m &lt; nl.length; m++) {
					nl[m].parentNode.removeChild(nl[m]);
				}
				model.USA.refreshArea('consentDocs');
				
				//Clear Devices - Investigational Devices
				if(model.getValue("count(instance('ins')/Device)") * 1 != 0) {
					model.USA.removeALLMSSMDevices(["main2"]);
				}

				//Clear Devices - Humanitarian Use Devices
				model.setValue("instance('ins')/dataHUD", "");
				model.setValue("instance('ins')/hudNum", "");
				model.setValue("instance('ins')/hudFDA", "");
				dl = model.getValue("instance('ins')/hudApprovalDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/hudApprovalDoc/@uri", "");
				model.setValue("instance('ins')/hudApprovalDoc/@docLink", "");
				model.setValue("instance('ins')/hudApprovalDoc", "");
				dl = model.getValue("instance('ins')/hudUseDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/hudUseDoc/@uri", "");
				model.setValue("instance('ins')/hudUseDoc/@docLink", "");
				model.setValue("instance('ins')/hudUseDoc", "");
				dl = model.getValue("instance('ins')/hudProductDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/hudProductDoc/@uri", "");
				model.setValue("instance('ins')/hudProductDoc/@docLink", "");
				model.setValue("instance('ins')/hudProductDoc", "");
				dl = model.getValue("instance('ins')/hudPatientDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/hudPatientDoc/@uri", "");
				model.setValue("instance('ins')/hudPatientDoc/@docLink", "");
				model.setValue("instance('ins')/hudPatientDoc", "");
				
				//Clear Specimen Banking
				model.setValue("instance('ins')/specDescribe", "");
				model.setValue("instance('ins')/specLength", "");
				model.setValue("instance('ins')/specAccess", "");
				model.setValue("instance('ins')/specInfo", "");
				model.setValue("instance('ins')/specimensWillBeReleased", "");
				var nl = model.selectNodeList("instance('ins')/Person[(invitation/@status!='author' or (invitation/@status='author' and role!='co')) and role!='nonProtocol' and not(name = preceding::name)]/@personnelResponsibleSpecimensObtain", null);
				for(var m = 0; m &lt; nl.length; m++) {
					model.setValue("instance('ins')/Person[(invitation/@status!='author' or (invitation/@status='author' and role!='co')) and role!='nonProtocol' and not(name = preceding::name)]["+(m + 1)+"]/@personnelResponsibleSpecimensObtain", "");
				}
				model.setValue("instance('ins')/specRelease", "");
				model.setValue("instance('ins')/specApproval", "");
				model.setValue("instance('ins')/specProvide", "");
				model.setValue("instance('ins')/specimensCanBeObtainedBy", "");
				
			}
			if(x != '2' &amp;&amp; x != '3' &amp;&amp; y !='2' &amp;&amp; y != '3')	{				     
				model.setValue("instance('ins')/instPRMC", "");
				model.setValue("instance('ins')/clinicalTrial", "");
				model.setValue("instance('ins')/invDrugs", "");
				model.setValue("instance('ins')/radiologicalProcedures", "");
				model.setValue("instance('ins')/involvesBiosafety", "");
				model.setValue("instance('ins')/requestingCRUResources", "");
				
				//Clear Cancer
				model.setValue("instance('ins')/instPRMCApp", "");
				var dl = model.getValue("instance('ins')/instPRMCAppLetter/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/instPRMCAppLetter/@uri", "");
				model.setValue("instance('ins')/instPRMCAppLetter/@docLink", "");
				model.setValue("instance('ins')/instPRMCAppLetter", "");
				
				//Clear Radiation Safety
				model.setValue("instance('ins')/radiologicalProceduresDosimetry", "");
				var dl = model.getValue("instance('ins')/dosimetryChart/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/dosimetryChart/@uri", "");
				model.setValue("instance('ins')/dosimetryChart/@docLink", "");
				model.setValue("instance('ins')/dosimetryChart", "");				
				model.setValue("instance('ins')/involvesRadiologicalProcedures", "");
				model.setValue("instance('ins')/involvesStandardCareRadiologicalProceduresOnly", "");
				
				//Clear Clinical Research Unit - Summary
				model.setValue("instance('ins')/studyWillUtilize", "");
				model.setValue("instance('ins')/includesStandardCare", "");
				model.setValue("instance('ins')/rareDiseaseStudy", "");
				model.setValue("instance('ins')/CRUPersonnel", "");
				model.setValue("instance('ins')/CRUFacilities", "");
				model.setValue("instance('ins')/descPerformedCRU", "");
				
				//Clear Clinical Research Unit - Requirements
				model.setValue("instance('ins')/totalNumberPatientsEvaluatedCRU", "");
				model.setValue("instance('ins')/outpatientVisits", "");
				model.setValue("instance('ins')/hoursPerVisit", "");
				model.setValue("instance('ins')/uniqueSituations", "");
				model.setValue("instance('ins')/timeDayTesting", "");
				model.setValue("instance('ins')/timeDayTestingSpecify", "");
				model.setValue("instance('ins')/specialNursingReqs", "");
				model.setValue("instance('ins')/specialNursingReqsSpecify", "");
				model.setValue("instance('ins')/specialInfectionControlReqs", "");
				model.setValue("instance('ins')/specialInfectionControlReqsSpecify", "");
				model.setValue("instance('ins')/fallsPrecaution", "");
				model.setValue("instance('ins')/seizurePrecaution", "");
				model.setValue("instance('ins')/patientsCareSelves", "");
				model.setValue("instance('ins')/requireNursingAssistance", "");
				model.setValue("instance('ins')/requireNursingAssistanceSpecify", "");
				model.setValue("instance('ins')/dietaryReqs", "");
				model.setValue("instance('ins')/dietaryReqsSpecify", "");
				
				//Clear Clinical Research Unit - Costs
				model.setValue("instance('ins')/totalCosts", "");
				model.setValue("instance('ins')/totalCRUCosts", "");
				model.setValue("instance('ins')/compTotalCRU", "");
				model.setValue("instance('ins')/totalCRU", "");
				var m = model.selectNodeList("instance('ins')/Cost", null);
				for(var i = m.length; i &gt; 0; i--){
					m[i-1].parentNode.removeChild(m[i-1]);
				}
				model.USA.refreshArea('Cost');
			}
						
			//onchange event for Procedure tab
			var bResearchInv = model.getValue("instance('ins')/researchInvolves",null);
			var bExSummary = model.getValue("instance('ins')/exemptSurveyInstruments",null);
			var bAppType = model.getValue("instance('ins')/appType",null);
			var bCRUnit = model.getValue("instance('ins')/requestingCRUResources",null);
			var procedures = (bResearchInv == "2" || bResearchInv == "3" || bExSummary == "1" || (bAppType == "2" &amp;&amp; bCRUnit == "1") || (bAppType == "3" &amp;&amp; bCRUnit == "1")) ? "1" : "0";
			if(procedures != 1) {
			
				//Clear Procedures - Narrative
				model.setValue("instance('ins')/studyDesignDescription", "");
				model.setValue("instance('ins')/proceduresDescription", "");
				model.setValue("instance('ins')/sourceRecordsDescription", "");
				model.setValue("instance('ins')/dataCollectedDescription", "");
				
				//Clear Procedures - Genetic Testing
				model.setValue("instance('ins')/geneticTesting", "");
				model.setValue("instance('ins')/geneticTestingForClinicalPurposes", "");
				
				//Clear Procedures - Details
				model.setValue("instance('ins')/survey", "");
				model.setValue("instance('ins')/typeInstruments", "");				
				model.setValue("instance('ins')/standardizedInstruments", "");
				model.setValue("instance('ins')/investigatorInstrumentsDescription", "");
				model.setValue("instance('ins')/avTaping", "");
				model.setValue("instance('ins')/avTapingSubjectsIdentifiable", "");
				model.setValue("instance('ins')/avTapingMediaDiscarded", "");
				model.setValue("instance('ins')/avTapingMediaStorageDuration", "");
				model.setValue("instance('ins')/avTapingMediaStorageConfidentiality", "");
				model.setValue("instance('ins')/avTapingMediaShared", "");
				model.setValue("instance('ins')/avTapingRequiredForParticipation", "");
				model.setValue("instance('ins')/deception", "");
				model.setValue("instance('ins')/deceptionNotes", "");
				model.setValue("instance('ins')/shareResults", "");
				model.setValue("instance('ins')/descShareResults", "");
				model.setValue("instance('ins')/descShareResultsWhen", "");
			}
			
			if(x != '4') {
			
				//Clear Exception - Summary tab
				model.setValue("instance('ins')/exemptSummary", "");
				model.setValue("instance('ins')/exemptLocation", "");
				model.setValue("instance('ins')/exemptInteractionSubjects", "");
				model.setValue("instance('ins')/exemptEquitableSelection", "");
				model.setValue("instance('ins')/exemptSurveyInstruments", "");
				var dl3 = model.getValue("instance('ins')/exemptResearchInfoSheet/@docLink",null);
				if(dl3) model.Frm.deleteDocumentRef(dl3, 'ins');
                model.setValue("instance('ins')/exemptResearchInfoSheet/@uri", "");
				model.setValue("instance('ins')/exemptResearchInfoSheet/@docLink", "");
                model.setValue("instance('ins')/exemptResearchInfoSheet", "");
				model.setValue("instance('ins')/exemptPrivacyProtected", "");
				
				//Clear Exception - Category tab
				model.setValue("instance('ins')/exemptCategories", "");								
			}
			
			//Clear Procedures - Instruments
			var bInstrumentsBeingUsed = model.getValue("instance('ins')/typeInstruments", null);
			var bExSummary = model.getValue("instance('ins')/exemptSurveyInstruments",null);
			if(bExSummary != '1' &amp;&amp; bInstrumentsBeingUsed.indexOf('2') &lt; 0) {
				var nl = model.selectNodeList("instance('ins')/instruments", null);
				for(var m = 0; m &lt; nl.length; m++) {
					var dl = model.getValue("instance('ins')/instruments["+(m + 1)+"]/document/@docLink", null);
					if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				}
				for(var m = 0; m &lt; nl.length; m++) {
					nl[m].parentNode.removeChild(nl[m]);
				}
				model.USA.refreshArea('instruments');
			}
			
			
			//Clear Procedures - Compensation
			var cResearchInv = model.getValue("instance('ins')/researchInvolves",null);
			var cAppType = model.getValue("instance('ins')/appType",null);
			var cCRUnit = model.getValue("instance('ins')/requestingCRUResources",null);
			var compensation = (cResearchInv == "2" || cResearchInv == "3" || (bAppType == "2" &amp;&amp; bCRUnit == "1") || (bAppType == "3" &amp;&amp; bCRUnit == "1")) ? "1" : "0";
			if(compensation != '1') {
				model.setValue("instance('ins')/compParticipation", "");
				model.setValue("instance('ins')/compTotal", "");
				model.setValue("instance('ins')/compTotalCRU", "");
				var m = model.selectNodeList("instance('ins')/Compensation", null);
				for(var i = m.length; i &gt; 0; i--){
					m[i-1].parentNode.removeChild(m[i-1]);
				}
				model.USA.refreshArea('Compensation');
			}
						
			var appType = model.getValue(".",contextNode);
			var hipaaCon = model.getValue("instance('ins')/externalIRBHIPAA",null);
			appType = (appType == "1" || appType == "4" || hipaaCon == "0") ? "1" : "0";
			if(appType != "1") {
				//Clear Data - Collection
				model.setValue("instance('ins')/healthInfoViewedRecorded", "");
				model.setValue("instance('ins')/healthInfoViewedRecordedDescription", "");
				model.setValue("instance('ins')/nonHealthInfoViewedRecorded", "");
				model.setValue("instance('ins')/nonHealthInfoViewedRecordedDescription", "");
				model.setValue("instance('ins')/HIVInfoViewedRecorded", "");
				model.setValue("instance('ins')/HIVInfoInformedConsent", "");
				model.setValue("instance('ins')/dataRecord", "");
				model.setValue("instance('ins')/dataViewed", "");
				model.setValue("instance('ins')/dataRecorded", "");
				model.setValue("instance('ins')/dataCollectionSources", "");
				var dl3 = model.getValue("instance('ins')/dataCollection/@docLink",null);
				if(dl3) model.Frm.deleteDocumentRef(dl3, 'ins');
				model.setValue("instance('ins')/dataCollection/@uri", "");
				model.setValue("instance('ins')/dataCollection/@docLink", "");
				model.setValue("instance('ins')/dataCollection", "");    					      
				
				//Clear Data - HIPAA	
				model.setValue("instance('ins')/obtainingHIPAAAuthorization", "");
				model.setValue("instance('ins')/requestingWaiverAlteration", "");				
				model.setValue("instance('ins')/explanationWhyNotWOWaiverAlteration", "");
				model.setValue("instance('ins')/researchCouldBeConductedWithoutPHI", "");
				model.setValue("instance('ins')/explanationWhyNotWOPHI", "");
				model.setValue("instance('ins')/howPHIProtected", "");
				model.setValue("instance('ins')/PHIDestroyed", "");
				model.setValue("instance('ins')/WhenHowPHIDestroyed", "");
				model.setValue("instance('ins')/justificationRetainingPHI", "");
				model.setValue("instance('ins')/PHIShared", "");
				model.setValue("instance('ins')/PHISharedDescription", "");
				model.setValue("instance('ins')/PHISharedJustification", "");
				model.setValue("instance('ins')/PHISharedWithWhom", "");
				model.setValue("instance('ins')/PHIObtainedBy", "");
				
				//Clear Data - HIV/AIDS	
				var nl = model.selectNodeList("instance('ins')/HIVPerson", null);
				for(var ii = 0; ii &lt; nl.length; ii++){
					nl[ii].parentNode.removeChild(nl[ii]);
				}
				
				//Clear Data - Storage
				model.setValue("instance('ins')/dataStore", "");
				model.setValue("instance('ins')/dataStoreHow", "");
				model.setValue("instance('ins')/dataStoreOther", "");
				model.setValue("instance('ins')/dataAccess", "");
				model.setValue("instance('ins')/dataTrans", "");
				model.setValue("instance('ins')/dataStoreWho", "");
				model.setValue("instance('ins')/dataLength", "");
				model.setValue("instance('ins')/dataSecure", "");
				model.setValue("instance('ins')/dataAnalysis", "");

				//Clear Data - Safety Monitoring
				model.setValue("instance('ins')/safetyMonitor", "");
				var n = model.selectNodeList("instance('ins')/primDataMan", null);
				for(var i = n.length; i &gt; 0; i--){
					n[i-1].parentNode.removeChild(n[i-1]);
				}
				var m = model.selectNodeList("instance('ins')/addlDataMan", null);
				for(var i = m.length; i &gt; 0; i--){
					m[i-1].parentNode.removeChild(m[i-1]);
				}
				model.USA.refreshArea('primDataMan');
				model.USA.refreshArea('addlDataMan');				
				model.setValue("instance('ins')/specificAims", "");
				model.setValue("instance('ins')/freqDataReview", "");
				model.setValue("instance('ins')/altStudyDesign", "");
				model.setValue("instance('ins')/minToxicity", "");
				model.setValue("instance('ins')/gradingSystem", "");
				model.setValue("instance('ins')/dataAccuracy", "");
				model.setValue("instance('ins')/suspensionReport", "");
				model.setValue("instance('ins')/subjectWithdraw", "");
				model.setValue("instance('ins')/primarySecondarySafetyEndpoints", "");
				dl = model.getValue("instance('ins')/dmcDescription/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/dmcDescription/@uri", "");
				model.setValue("instance('ins')/dmcDescription/@docLink", "");
				model.setValue("instance('ins')/dmcDescription", "");
				model.setValue("instance('ins')/dmcCharterAvailable", "");
				dl = model.getValue("instance('ins')/dmcCharter/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/dmcCharter/@uri", "");
				model.setValue("instance('ins')/dmcCharter/@docLink", "");
				model.setValue("instance('ins')/dmcCharter", "");	
			}
			
			//Clear Data - Retrospective Review
			var exemptInteractionSubjects = model.getValue("instance('ins')/exemptInteractionSubjects", null);
			var rResearchInv = model.getValue("instance('ins')/researchInvolves", null);
			if(rResearchInv != "1" &amp;&amp; rResearchInv != "2" &amp;&amp; exemptInteractionSubjects != "0") {
				model.setValue("instance('ins')/enrollThisSite", "");
				model.setValue("instance('ins')/retroStartDate", "");
				model.setValue("instance('ins')/retroEndDate", "");
				model.setValue("instance('ins')/DataSubmittedFDAPermit", "");
				model.setValue("instance('ins')/DeviceUsedDataSubmittedFDAPermit", "");
			}
			
			//Clear Financial Administration
			var fundingCat = model.getValue("instance('ins')/fundingSourceComp/Organization/fundingCat[. = 'Industry']",null);
			var fDrugBiologics = model.getValue(".",contextNode);
			var finvDevice = model.getValue("instance('ins')/invDevs",null);
			var fClinicalTrial = model.getValue("instance('ins')/clinicalTrial",null);
			var finance = "0";
			if(fundingCat == "Industry" || fDrugBiologics == "1" || finvDevice == "1" || fClinicalTrial == "1") {
				finance = "1";
			} else {
				finance = "0";
			}
			if(finance != "1") {
				model.setValue("instance('ins')/FACTSClinicalResearchStudyCategory", "");
				model.setValue("instance('ins')/facts_payment_option", "");
				model.setValue("instance('ins')/facts_payment_option_1", "");
				model.setValue("instance('ins')/facts_payment_option_2", "");
				model.setValue("instance('ins')/facts_payment_option_5", "");
			}
			
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/appType = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="yesnobuttons"><ix:attr value="if(instance('ins')/appType[. = '3'], '', 'display:none')" name="style"/><td class="component   widestLabel"><table style="margin-left:-3px;"><tr class="top"><td style="width:300px;"><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/externalIRBHIPAA" appearance="full" id="externalIRBHIPAA"><xf:label>External IRB Will Make HIPAA-Related Considerations</xf:label><xf:hint>
			If external IRB will not review the HIPAA authorization for this study check "No". If external IRB will not grant a waiver of HIPAA authorization and you will access medical records to identify potential subjects for recruitment purposes, check "No".
		</xf:hint><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/externalIRBHIPAA" appearance="full" id="externalIRBHIPAA"><xf:label/><xf:hint>
			If external IRB will not review the HIPAA authorization for this study check "No". If external IRB will not grant a waiver of HIPAA authorization and you will access medical records to identify potential subjects for recruitment purposes, check "No".
		</xf:hint><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
			var hipaaCon = model.getValue(".",contextNode);
			var appType = model.getValue("instance('ins')/appType",null);
			appType = (appType == "1" || appType == "4" || hipaaCon == "0") ? "1" : "0";
			if(appType != "1") {
			
				//Clear Data - Collection
				model.setValue("instance('ins')/healthInfoViewedRecorded", "");
				model.setValue("instance('ins')/healthInfoViewedRecordedDescription", "");
				model.setValue("instance('ins')/nonHealthInfoViewedRecorded", "");
				model.setValue("instance('ins')/nonHealthInfoViewedRecordedDescription", "");
				model.setValue("instance('ins')/HIVInfoViewedRecorded", "");
				model.setValue("instance('ins')/HIVInfoInformedConsent", "");
				model.setValue("instance('ins')/dataRecord", "");
				model.setValue("instance('ins')/dataViewed", "");
				model.setValue("instance('ins')/dataRecorded", "");
				model.setValue("instance('ins')/dataCollectionSources", "");
				var dl3 = model.getValue("instance('ins')/dataCollection/@docLink",null);
				if(dl3) model.Frm.deleteDocumentRef(dl3, 'ins');
				model.setValue("instance('ins')/dataCollection/@uri", "");
				model.setValue("instance('ins')/dataCollection/@docLink", "");
				model.setValue("instance('ins')/dataCollection", "");

				//Clear Data - HIPAA	
				model.setValue("instance('ins')/obtainingHIPAAAuthorization", "");
				model.setValue("instance('ins')/requestingWaiverAlteration", "");				
				model.setValue("instance('ins')/explanationWhyNotWOWaiverAlteration", "");
				model.setValue("instance('ins')/researchCouldBeConductedWithoutPHI", "");
				model.setValue("instance('ins')/explanationWhyNotWOPHI", "");
				model.setValue("instance('ins')/howPHIProtected", "");
				model.setValue("instance('ins')/PHIDestroyed", "");
				model.setValue("instance('ins')/WhenHowPHIDestroyed", "");
				model.setValue("instance('ins')/justificationRetainingPHI", "");
				model.setValue("instance('ins')/PHIShared", "");
				model.setValue("instance('ins')/PHISharedDescription", "");
				model.setValue("instance('ins')/PHISharedJustification", "");
				model.setValue("instance('ins')/PHISharedWithWhom", "");
				model.setValue("instance('ins')/PHIObtainedBy", "");

				//Clear Data - HIV/AIDS	
				var nl = model.selectNodeList("instance('ins')/HIVPerson", null);
				for(var ii = 0; ii &lt; nl.length; ii++){
					nl[ii].parentNode.removeChild(nl[ii]);
				}	
				
				//Clear Data - Storage
				model.setValue("instance('ins')/dataStore", "");
				model.setValue("instance('ins')/dataStoreHow", "");
				model.setValue("instance('ins')/dataStoreOther", "");
				model.setValue("instance('ins')/dataAccess", "");
				model.setValue("instance('ins')/dataTrans", "");
				model.setValue("instance('ins')/dataStoreWho", "");
				model.setValue("instance('ins')/dataLength", "");
				model.setValue("instance('ins')/dataSecure", "");
				model.setValue("instance('ins')/dataAnalysis", "");
				
				//Clear Data - Safety Monitoring
				model.setValue("instance('ins')/safetyMonitor", "");
				var n = model.selectNodeList("instance('ins')/primDataMan", null);
				for(var i = n.length; i &gt; 0; i--){
					n[i-1].parentNode.removeChild(n[i-1]);
				}
				var m = model.selectNodeList("instance('ins')/addlDataMan", null);
				for(var i = m.length; i &gt; 0; i--){
					m[i-1].parentNode.removeChild(m[i-1]);
				}
				model.USA.refreshArea('primDataMan');
				model.USA.refreshArea('addlDataMan');				
				model.setValue("instance('ins')/specificAims", "");
				model.setValue("instance('ins')/freqDataReview", "");
				model.setValue("instance('ins')/altStudyDesign", "");
				model.setValue("instance('ins')/minToxicity", "");
				model.setValue("instance('ins')/gradingSystem", "");
				model.setValue("instance('ins')/dataAccuracy", "");
				model.setValue("instance('ins')/suspensionReport", "");
				model.setValue("instance('ins')/subjectWithdraw", "");
				model.setValue("instance('ins')/primarySecondarySafetyEndpoints", "");
				dl = model.getValue("instance('ins')/dmcDescription/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/dmcDescription/@uri", "");
				model.setValue("instance('ins')/dmcDescription/@docLink", "");
				model.setValue("instance('ins')/dmcDescription", "");
				model.setValue("instance('ins')/dmcCharterAvailable", "");
				dl = model.getValue("instance('ins')/dmcCharter/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/dmcCharter/@uri", "");
				model.setValue("instance('ins')/dmcCharter/@docLink", "");
				model.setValue("instance('ins')/dmcCharter", "");

				//Clear Data - Retrospective Review
				model.setValue("instance('ins')/enrollThisSite", "");
				model.setValue("instance('ins')/retroStartDate", "");
				model.setValue("instance('ins')/retroEndDate", "");
				model.setValue("instance('ins')/DataSubmittedFDAPermit", "");
				model.setValue("instance('ins')/DeviceUsedDataSubmittedFDAPermit", "");
			}
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td><span class="helpdialogOver" style="cursor:help;color:blue;padding:3px;"><img src="../fil/system/resources/ideate/imgs/questionMark.jpg"/><div style="width:200px"><p><span style="color:black"><help fieldWidth="300px;">
			If external IRB will not review the HIPAA authorization for this study check "No". If external IRB will not grant a waiver of HIPAA authorization and you will access medical records to identify potential subjects for recruitment purposes, check "No".
		</help></span></p></div></span></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/externalIRBHIPAA = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="radiobuttons"><ix:attr value="if(instance('ins')/appType[. = '1'], '', 'display:none')" name="style"/><td class="component   widestLabel"><xf:select1 ref="instance('ins')/researchInvolves" appearance="full" id="researchInvolves"><xf:label>Research Involves</xf:label><xf:repeat nodeset="instance('cats')/researchInvolves/type"><xf:item><xf:label><xf:output value="@name"/></xf:label><xf:value><xf:output value="@id"/></xf:value></xf:item></xf:repeat><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			y = model.getValue("instance('ins')/appType",contextNode);
			if(x != '2' &amp;&amp; x != '3') {
				model.setValue("instance('ins')/useHUD", "");
				model.setValue("instance('ins')/invDevs", "");
				model.setValue("instance('ins')/bankingSpecimens", "");											
				
				//Clear Subject - Setting and Resources
				model.setValue("instance('ins')/settingResearch", "");
				model.setValue("instance('ins')/settingResearchOther", "");
				model.setValue("instance('ins')/neededNumSubjects", "");
				model.setValue("instance('ins')/feasibilityRecruitmentGoals", "");
				model.setValue("instance('ins')/facilitiesForConductingResearch", "");
				model.setValue("instance('ins')/multiCenter", "");
				model.setValue("instance('ins')/descMultiCenter", "");
				model.setValue("instance('ins')/multiCenterISMPIResponsible", "");
				model.setValue("instance('ins')/isCBPR", "");
				model.setValue("instance('ins')/descCBPR", "");
				
				//Clear Subject - Population
				model.setValue("instance('ins')/inclusionCriteria", "");
				model.setValue("instance('ins')/exclusionCriteria", "");
				model.setValue("instance('ins')/enrollRestrictions", "");
				model.setValue("instance('ins')/justifyRestrictions", "");
				model.setValue("instance('ins')/ageRange", "");
				model.setValue("instance('ins')/population", "");
				model.setValue("instance('ins')/otherAspects", "");
				model.setValue("instance('ins')/otherSafeguards", "");
				
				//Clear Subject - Participation
				model.setValue("instance('ins')/studyTimeline", "");
				model.setValue("instance('ins')/studyTimelineA", "");
				model.setValue("instance('ins')/studyTimelineB", "");
				model.setValue("instance('ins')/subjectWithdrawal", "");
				model.setValue("instance('ins')/investigatorWithdrawSubjects", "");
				model.setValue("instance('ins')/recruitingParticipants", "");
				model.setValue("instance('ins')/recMethod", "");
				model.setValue("instance('ins')/recMethodOther", "");
				model.setValue("instance('ins')/howParticipantIdentified", "");
				model.setValue("instance('ins')/approachParticipant", "");
				model.setValue("instance('ins')/researchIntroduced", "");
				model.setValue("instance('ins')/howParticipantScreened", "");
				
				//Clear Subject - Risk and Benefits
				model.setValue("instance('ins')/subjectRisks", "");
				model.setValue("instance('ins')/proceduresToLessenRiskDescription", "");
				model.setValue("instance('ins')/harmProvision", "");
				model.setValue("instance('ins')/subjectBenefits", "");
				model.setValue("instance('ins')/subjectPayment", "");
				model.setValue("instance('ins')/subjectPrivacy", "");
				model.setValue("instance('ins')/subjectImpact", "");
				
				//Clear Subject - Children
				model.setValue("instance('ins')/subGreat", "");
				
				//Clear Subject - Pregnant Women
				model.setValue("instance('ins')/subPreg", "");
				model.setValue("instance('ins')/subPregData", "");
				
				//Clear Subject - Prisoners
				model.setValue("instance('ins')/prisonerCategoryResearchInstruction", "");
				model.setValue("instance('ins')/prisonerWhoMayBenefit", "");
				
				//Clear Subject - Adults Without Capacity
				model.setValue("instance('ins')/directBenefitToSubjects", "");
				model.setValue("instance('ins')/assentRequiredOf", "");
				model.setValue("instance('ins')/riskToSubjects", "");
				
				//Clear Subject - Enrollment
				model.setValue("instance('ins')/totalEnrolled", "");

				//Clear Data - Safety Monitoring
				model.setValue("instance('ins')/safetyMonitor", "");
				var n = model.selectNodeList("instance('ins')/primDataMan", null);
				for(var i = n.length; i &gt; 0; i--){
					n[i-1].parentNode.removeChild(n[i-1]);
				}
				var m = model.selectNodeList("instance('ins')/addlDataMan", null);
				for(var i = m.length; i &gt; 0; i--){
					m[i-1].parentNode.removeChild(m[i-1]);
				}
				model.USA.refreshArea('primDataMan');
				model.USA.refreshArea('addlDataMan');				
				model.setValue("instance('ins')/specificAims", "");
				model.setValue("instance('ins')/freqDataReview", "");
				model.setValue("instance('ins')/altStudyDesign", "");
				model.setValue("instance('ins')/minToxicity", "");
				model.setValue("instance('ins')/gradingSystem", "");
				model.setValue("instance('ins')/dataAccuracy", "");
				model.setValue("instance('ins')/suspensionReport", "");
				model.setValue("instance('ins')/subjectWithdraw", "");
				model.setValue("instance('ins')/primarySecondarySafetyEndpoints", "");
				dl = model.getValue("instance('ins')/dmcDescription/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/dmcDescription/@uri", "");
				model.setValue("instance('ins')/dmcDescription/@docLink", "");
				model.setValue("instance('ins')/dmcDescription", "");
				model.setValue("instance('ins')/dmcCharterAvailable", "");
				dl = model.getValue("instance('ins')/dmcCharter/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/dmcCharter/@uri", "");
				model.setValue("instance('ins')/dmcCharter/@docLink", "");
				model.setValue("instance('ins')/dmcCharter", "");

				//Clear Devices - Investigational Devices
				if(model.getValue("count(instance('ins')/Device)") * 1 != 0) {
					model.USA.removeALLMSSMDevices(["main2"]);
				}

				//Clear Devices - Humanitarian Use Devices
				model.setValue("instance('ins')/dataHUD", "");
				model.setValue("instance('ins')/hudNum", "");
				model.setValue("instance('ins')/hudFDA", "");
				dl = model.getValue("instance('ins')/hudApprovalDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/hudApprovalDoc/@uri", "");
				model.setValue("instance('ins')/hudApprovalDoc/@docLink", "");
				model.setValue("instance('ins')/hudApprovalDoc", "");
				dl = model.getValue("instance('ins')/hudUseDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/hudUseDoc/@uri", "");
				model.setValue("instance('ins')/hudUseDoc/@docLink", "");
				model.setValue("instance('ins')/hudUseDoc", "");
				dl = model.getValue("instance('ins')/hudProductDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/hudProductDoc/@uri", "");
				model.setValue("instance('ins')/hudProductDoc/@docLink", "");
				model.setValue("instance('ins')/hudProductDoc", "");
				dl = model.getValue("instance('ins')/hudPatientDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/hudPatientDoc/@uri", "");
				model.setValue("instance('ins')/hudPatientDoc/@docLink", "");
				model.setValue("instance('ins')/hudPatientDoc", "");

				//Clear Specimen Banking
				model.setValue("instance('ins')/specDescribe", "");
				model.setValue("instance('ins')/specLength", "");
				model.setValue("instance('ins')/specAccess", "");
				model.setValue("instance('ins')/specInfo", "");
				model.setValue("instance('ins')/specimensWillBeReleased", "");
				var nl = model.selectNodeList("instance('ins')/Person[(invitation/@status!='author' or (invitation/@status='author' and role!='co')) and role!='nonProtocol' and not(name = preceding::name)]/@personnelResponsibleSpecimensObtain", null);
				for(var m = 0; m &lt; nl.length; m++) {
					model.setValue("instance('ins')/Person[(invitation/@status!='author' or (invitation/@status='author' and role!='co')) and role!='nonProtocol' and not(name = preceding::name)]["+(m + 1)+"]/@personnelResponsibleSpecimensObtain", "");
				}
				model.setValue("instance('ins')/specRelease", "");
				model.setValue("instance('ins')/specApproval", "");
				model.setValue("instance('ins')/specProvide", "");
				model.setValue("instance('ins')/specimensCanBeObtainedBy", "");	
			}
			if(x != '2' &amp;&amp; x != '3' &amp;&amp; y !='2' &amp;&amp; y != '3')	{				     
				model.setValue("instance('ins')/instPRMC", "");											
				model.setValue("instance('ins')/clinicalTrial", "");
				model.setValue("instance('ins')/invDrugs", "");
				model.setValue("instance('ins')/radiologicalProcedures", "");
				model.setValue("instance('ins')/involvesBiosafety", "");
				model.setValue("instance('ins')/requestingCRUResources", "");
				
				//Clear Cancer
				model.setValue("instance('ins')/instPRMCApp", "");
				var dl = model.getValue("instance('ins')/instPRMCAppLetter/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/instPRMCAppLetter/@uri", "");
				model.setValue("instance('ins')/instPRMCAppLetter/@docLink", "");
				model.setValue("instance('ins')/instPRMCAppLetter", "");				
				
				//Clear Radiation Safety
				model.setValue("instance('ins')/radiologicalProceduresDosimetry", "");
				var dl = model.getValue("instance('ins')/dosimetryChart/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/dosimetryChart/@uri", "");
				model.setValue("instance('ins')/dosimetryChart/@docLink", "");
				model.setValue("instance('ins')/dosimetryChart", "");				
				model.setValue("instance('ins')/involvesRadiologicalProcedures", "");
				model.setValue("instance('ins')/involvesStandardCareRadiologicalProceduresOnly", "");
				
				//Clear Clinical Research Unit - Summary
				model.setValue("instance('ins')/studyWillUtilize", "");
				model.setValue("instance('ins')/includesStandardCare", "");
				model.setValue("instance('ins')/rareDiseaseStudy", "");
				model.setValue("instance('ins')/CRUPersonnel", "");
				model.setValue("instance('ins')/CRUFacilities", "");
				model.setValue("instance('ins')/descPerformedCRU", "");
				
				//Clear Clinical Research Unit - Requirements
				model.setValue("instance('ins')/totalNumberPatientsEvaluatedCRU", "");
				model.setValue("instance('ins')/outpatientVisits", "");
				model.setValue("instance('ins')/hoursPerVisit", "");
				model.setValue("instance('ins')/uniqueSituations", "");
				model.setValue("instance('ins')/timeDayTesting", "");
				model.setValue("instance('ins')/timeDayTestingSpecify", "");
				model.setValue("instance('ins')/specialNursingReqs", "");
				model.setValue("instance('ins')/specialNursingReqsSpecify", "");
				model.setValue("instance('ins')/specialInfectionControlReqs", "");
				model.setValue("instance('ins')/specialInfectionControlReqsSpecify", "");
				model.setValue("instance('ins')/fallsPrecaution", "");
				model.setValue("instance('ins')/seizurePrecaution", "");
				model.setValue("instance('ins')/patientsCareSelves", "");
				model.setValue("instance('ins')/requireNursingAssistance", "");
				model.setValue("instance('ins')/requireNursingAssistanceSpecify", "");
				model.setValue("instance('ins')/dietaryReqs", "");
				model.setValue("instance('ins')/dietaryReqsSpecify", "");
				
				//Clear Clinical Research Unit - Costs
				model.setValue("instance('ins')/totalCosts", "");
				model.setValue("instance('ins')/totalCRUCosts", "");
				model.setValue("instance('ins')/compTotalCRU", "");
				model.setValue("instance('ins')/totalCRU", "");
				var m = model.selectNodeList("instance('ins')/Cost", null);
				for(var i = m.length; i &gt; 0; i--){
					m[i-1].parentNode.removeChild(m[i-1]);
				}
				model.USA.refreshArea('Cost');
			}
			
			//onchange event for Procedure tab
			var bResearchInv = model.getValue("instance('ins')/researchInvolves",null);
			var bExSummary = model.getValue("instance('ins')/exemptSurveyInstruments",null);
			var bAppType = model.getValue("instance('ins')/appType",null);
			var bCRUnit = model.getValue("instance('ins')/requestingCRUResources",null);
			var procedures = (bResearchInv == "2" || bResearchInv == "3" || bExSummary == "1" || (bAppType == "2" &amp;&amp; bCRUnit == "1") || (bAppType == "3" &amp;&amp; bCRUnit == "1")) ? "1" : "0";
			if(procedures != 1) {
			
				//Clear Procedures - Narrative
				model.setValue("instance('ins')/studyDesignDescription", "");
				model.setValue("instance('ins')/proceduresDescription", "");
				model.setValue("instance('ins')/sourceRecordsDescription", "");
				model.setValue("instance('ins')/dataCollectedDescription", "");
				
				//Clear Procedures - Genetic Testing
				model.setValue("instance('ins')/geneticTesting", "");
				model.setValue("instance('ins')/geneticTestingForClinicalPurposes", "");
				
				//Clear Procedures - Details
				model.setValue("instance('ins')/survey", "");
				model.setValue("instance('ins')/typeInstruments", "");				
				model.setValue("instance('ins')/standardizedInstruments", "");
				model.setValue("instance('ins')/investigatorInstrumentsDescription", "");
				model.setValue("instance('ins')/avTaping", "");
				model.setValue("instance('ins')/avTapingSubjectsIdentifiable", "");
				model.setValue("instance('ins')/avTapingMediaDiscarded", "");
				model.setValue("instance('ins')/avTapingMediaStorageDuration", "");
				model.setValue("instance('ins')/avTapingMediaStorageConfidentiality", "");
				model.setValue("instance('ins')/avTapingMediaShared", "");
				model.setValue("instance('ins')/avTapingRequiredForParticipation", "");
				model.setValue("instance('ins')/deception", "");
				model.setValue("instance('ins')/deceptionNotes", "");
				model.setValue("instance('ins')/shareResults", "");
				model.setValue("instance('ins')/descShareResults", "");
				model.setValue("instance('ins')/descShareResultsWhen", "");
			}
			//Clear Procedures - Instruments
			var bInstrumentsBeingUsed = model.getValue("instance('ins')/typeInstruments", null);
			var bExSummary = model.getValue("instance('ins')/exemptSurveyInstruments",null);
			if(bExSummary != '1' &amp;&amp; bInstrumentsBeingUsed.indexOf('2') &lt; 0) {
				var nl = model.selectNodeList("instance('ins')/instruments", null);
				for(var m = 0; m &lt; nl.length; m++) {
					var dl = model.getValue("instance('ins')/instruments["+(m + 1)+"]/document/@docLink", null);
					if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				}
				for(var m = 0; m &lt; nl.length; m++) {
					nl[m].parentNode.removeChild(nl[m]);
				}
				model.USA.refreshArea('instruments');
			}
			//Clear Procedures - Compensation
			var cResearchInv = model.getValue("instance('ins')/researchInvolves",null);
			var cAppType = model.getValue("instance('ins')/appType",null);
			var cCRUnit = model.getValue("instance('ins')/requestingCRUResources",null);
			var compensation = (cResearchInv == "2" || cResearchInv == "3" || (bAppType == "2" &amp;&amp; bCRUnit == "1") || (bAppType == "3" &amp;&amp; bCRUnit == "1")) ? "1" : "0";
			if(compensation != '1') {
				model.setValue("instance('ins')/compParticipation", "");
				model.setValue("instance('ins')/compTotal", "");
				model.setValue("instance('ins')/compTotalCRU", "");
				var m = model.selectNodeList("instance('ins')/Compensation", null);
				for(var i = m.length; i &gt; 0; i--){
					m[i-1].parentNode.removeChild(m[i-1]);
				}
				model.USA.refreshArea('Compensation');
			}
			
			//Clear Data - Retrospective Review
			var exemptInteractionSubjects = model.getValue("instance('ins')/exemptInteractionSubjects", null);
			var rResearchInv = model.getValue(".", contextNode);
			if(rResearchInv != "1" &amp;&amp; rResearchInv != "2" &amp;&amp; exemptInteractionSubjects != "0") {
				model.setValue("instance('ins')/enrollThisSite", "");
				model.setValue("instance('ins')/retroStartDate", "");
				model.setValue("instance('ins')/retroEndDate", "");
				model.setValue("instance('ins')/DataSubmittedFDAPermit", "");
				model.setValue("instance('ins')/DeviceUsedDataSubmittedFDAPermit", "");
			}
			
			//Clear Financial Administration
			var fundingCat = model.getValue("instance('ins')/fundingSourceComp/Organization/fundingCat[. = 'Industry']",null);
			var fDrugBiologics = model.getValue(".",contextNode);
			var finvDevice = model.getValue("instance('ins')/invDevs",null);
			var fClinicalTrial = model.getValue("instance('ins')/clinicalTrial",null);
			var finance = "0";
			if(fundingCat == "Industry" || fDrugBiologics == "1" || finvDevice == "1" || fClinicalTrial == "1") {
				finance = "1";
			} else {
				finance = "0";
			}
			if(finance != "1") {
				model.setValue("instance('ins')/FACTSClinicalResearchStudyCategory", "");
				model.setValue("instance('ins')/facts_payment_option", "");
				model.setValue("instance('ins')/facts_payment_option_1", "");
				model.setValue("instance('ins')/facts_payment_option_2", "");
				model.setValue("instance('ins')/facts_payment_option_5", "");
			}
			
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/researchInvolves = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="yesnobuttons"><ix:attr value="if(instance('ins')/appType[. = '1'], '', 'display:none')" name="style"/><td class="component   widestLabel"><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/consentingParticipants" appearance="full" id="consentingParticipants"><xf:label>Consenting Participants</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/consentingParticipants" appearance="full" id="consentingParticipants"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			if(x != '1') {
				model.setValue("instance('ins')/requestingWaiverForAnyProcedures", "");
				
				//Clear Consent - Obtaining Consent
				model.setValue("instance('ins')/concentProcess", "");
				var dl1 = model.getValue("instance('ins')/consentDoc/@docLink",null);
				if(dl1) model.Frm.deleteDocumentRef(dl1, 'ins');
				model.setValue("instance('ins')/consentDoc/@uri", "");
				model.setValue("instance('ins')/consentDoc/@docLink", "");
				model.setValue("instance('ins')/consentDoc", "");
				model.setValue("instance('ins')/whereWhenConcent", "");
				model.setValue("instance('ins')/consentWaiting", "");
				model.setValue("instance('ins')/consentSOPHRP", "");
				model.setValue("instance('ins')/consentDescribe", "");
				model.setValue("instance('ins')/consentWritten", "");
				model.setValue("instance('ins')/enrollNonEnglishSpeaking", "");
				model.setValue("instance('ins')/languagesOtherThanEnglish", "");
				model.setValue("instance('ins')/languagesConsentProcess", "");
				model.setValue("instance('ins')/justificationNotEnrollingNonEnglishSpeaking", "");
				
				//Clear Consent - Parental Permission
				model.setValue("instance('ins')/consPermission", "");
				model.setValue("instance('ins')/waiveParentalCriteriaSet", "");
				model.setValue("instance('ins')/waiveParentalCriteriaSetJustify", "");
				var dl = model.getValue("instance('ins')/PPDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/PPDoc/@uri", "");
				model.setValue("instance('ins')/PPDoc/@docLink", "");
				model.setValue("instance('ins')/PPDoc", "");
				model.setValue("instance('ins')/assentPermission", "");
				model.setValue("instance('ins')/assentProcess", "");
				var dl1 = model.getValue("instance('ins')/assentForm/@docLink",null);
				if(dl1) model.Frm.deleteDocumentRef(dl1, 'ins');
				model.setValue("instance('ins')/assentForm/@uri", "");
				model.setValue("instance('ins')/assentForm/@docLink", "");
				model.setValue("instance('ins')/assentForm", "");
				model.setValue("instance('ins')/assentDocumentProcess", "");
				model.setValue("instance('ins')/assentDocumentDesc", "");
				model.setValue("instance('ins')/consCapability", "");
				model.setValue("instance('ins')/waiveAssentCriteriaSet", "");
				model.setValue("instance('ins')/waiveAssentCriteriaSetJustification", "");
				model.setValue("instance('ins')/designedBenefits", "");
				
				//Clear Consent - Legally Authorized Representative
				model.setValue("instance('ins')/indCapableOfConsent", "");
				model.setValue("instance('ins')/permissionList", "");
				model.setValue("instance('ins')/assentOfSubjects", "");
				
				//Clear Consent - Waiver of Signed Consent
				model.setValue("instance('ins')/identJustification", "");
				model.setValue("instance('ins')/waiverOfSignedConsentJustification", "");
				
				//Clear Consent - Documents
				var nl = model.selectNodeList("instance('ins')/consentDocs", null);
				for(var m = 0; m &lt; nl.length; m++) {
					var dl = model.getValue("instance('ins')/consentDocs["+(m + 1)+"]/document/@docLink", null);
					if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				}
				for(var m = 0; m &lt; nl.length; m++) {
					nl[m].parentNode.removeChild(nl[m]);
				}
				model.USA.refreshArea('consentDocs');
			}
			
			//Clear Consent - Waiver of Informed Consent
			var requestingWaiverForAnyProcedures = model.getValue("instance('ins')/requestingWaiverForAnyProcedures", null);
			if(x != '0' &amp;&amp; requestingWaiverForAnyProcedures != '1') {
				model.setValue("instance('ins')/requestingWaiverFor", "");
				model.setValue("instance('ins')/consentWaiver", "");
				model.setValue("instance('ins')/noMoreThanMinRisk", "");
				model.setValue("instance('ins')/waiverNotAffectParticipants", "");
				model.setValue("instance('ins')/justifyWaiver", "");
				model.setValue("instance('ins')/provideAdditionalInformation", "");
				model.setValue("instance('ins')/describeAlterationConsent", "");
				model.setValue("instance('ins')/justifyAlterationConsent", "");
			}
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/consentingParticipants = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="yesnobuttons"><ix:attr value="if(instance('ins')/consentingParticipants = '1', '', 'display:none')" name="style"/><td class="component   widestLabel"><table style="margin-left:-3px;"><tr class="top"><td><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/requestingWaiverForAnyProcedures" appearance="full" id="requestingWaiverForAnyProcedures"><xf:label>Requesting Waiver or Alteration of Informed Consent for Any Procedures</xf:label><xf:hint>E.g. Withholding of information, deception studies.</xf:hint><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/requestingWaiverForAnyProcedures" appearance="full" id="requestingWaiverForAnyProcedures"><xf:label/><xf:hint>E.g. Withholding of information, deception studies.</xf:hint><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			var consentingParticipants = model.getValue("instance('ins')/consentingParticipants", null);
			if(x != '1' &amp;&amp; consentingParticipants != '0') {
				model.setValue("instance('ins')/requestingWaiverFor", "");
				model.setValue("instance('ins')/consentWaiver", "");
				model.setValue("instance('ins')/noMoreThanMinRisk", "");
				model.setValue("instance('ins')/waiverNotAffectParticipants", "");
				model.setValue("instance('ins')/justifyWaiver", "");
				model.setValue("instance('ins')/provideAdditionalInformation", "");
				model.setValue("instance('ins')/describeAlterationConsent", "");
				model.setValue("instance('ins')/justifyAlterationConsent", "");
			}
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td><span class="helpdialogOver" style="cursor:help;color:blue;padding:3px;"><img src="../fil/system/resources/ideate/imgs/questionMark.jpg"/><div style="width:200px"><p><span style="color:black"><help>E.g. Withholding of information, deception studies.</help></span></p></div></span></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/requestingWaiverForAnyProcedures = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="yesnobuttons"><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0, '', 'display:none')" name="style"/><td class="component   widestLabel"><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/useHUD" appearance="full" id="useHUD"><xf:label>Humanitarian Use Device (HUD) Used Exclusively in the Course of Medical Practice</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/useHUD" appearance="full" id="useHUD"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			if(x != '0') {
				model.setValue("instance('ins')/invDevs", "");
				
				//Clear Devices - Investigational Devices
				if(model.getValue("count(instance('ins')/Device)") * 1 != 0) {
					model.USA.removeALLMSSMDevices(["main2"]);
				}
			}
			if(x != '1') {
				//Clear Devices - Humanitarian Use Devices
				model.setValue("instance('ins')/dataHUD", "");
				model.setValue("instance('ins')/hudNum", "");
				model.setValue("instance('ins')/hudFDA", "");
				dl = model.getValue("instance('ins')/hudApprovalDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/hudApprovalDoc/@uri", "");
				model.setValue("instance('ins')/hudApprovalDoc/@docLink", "");
				model.setValue("instance('ins')/hudApprovalDoc", "");
				dl = model.getValue("instance('ins')/hudUseDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/hudUseDoc/@uri", "");
				model.setValue("instance('ins')/hudUseDoc/@docLink", "");
				model.setValue("instance('ins')/hudUseDoc", "");
				dl = model.getValue("instance('ins')/hudProductDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/hudProductDoc/@uri", "");
				model.setValue("instance('ins')/hudProductDoc/@docLink", "");
				model.setValue("instance('ins')/hudProductDoc", "");
				dl = model.getValue("instance('ins')/hudPatientDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/hudPatientDoc/@uri", "");
				model.setValue("instance('ins')/hudPatientDoc/@docLink", "");
				model.setValue("instance('ins')/hudPatientDoc", "");
			}
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/useHUD = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="yesnobuttons"><ix:attr value="if(instance('ins')/useHUD = '0', '', 'display:none')" name="style"/><td class="component   widestLabel"><table style="margin-left:-3px;"><tr class="top"><td><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/invDevs" appearance="full" id="invDevs"><xf:label>Use of an Investigational Device to Evaluate Its Safety or Effectiveness</xf:label><xf:hint>The term ‘‘device’’ means an instrument, apparatus, implement, machine, contrivance, implant, in vitro reagent, or other similar or related article, including any component, part, or accessory, which is 
			(1) recognized in the official National Formulary, or the United States Pharmacopeia, or any supplement to them,
			(2) intended for use in the diagnosis of disease or other conditions, or in the cure, mitigation, treatment, or prevention of disease, in man or other animals, or
			(3) intended to affect the structure or any function of the body of man or other animals, and which does not achieve its primary intended purposes through chemical action within or on the body of man or other animals and which is not dependent upon being metabolized for the achievement of its primary intended purposes. 
		</xf:hint><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/invDevs" appearance="full" id="invDevs"><xf:label/><xf:hint>The term ‘‘device’’ means an instrument, apparatus, implement, machine, contrivance, implant, in vitro reagent, or other similar or related article, including any component, part, or accessory, which is 
			(1) recognized in the official National Formulary, or the United States Pharmacopeia, or any supplement to them,
			(2) intended for use in the diagnosis of disease or other conditions, or in the cure, mitigation, treatment, or prevention of disease, in man or other animals, or
			(3) intended to affect the structure or any function of the body of man or other animals, and which does not achieve its primary intended purposes through chemical action within or on the body of man or other animals and which is not dependent upon being metabolized for the achievement of its primary intended purposes. 
		</xf:hint><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			if(x == '0') {
				//Clear Devices - Investigational Devices
				if(model.getValue("count(instance('ins')/Device)") * 1 != 0) {
					model.USA.removeALLMSSMDevices(["main2"]);
				}
			}
			
			//Clear Financial Administration
			var fundingCat = model.getValue("instance('ins')/fundingSourceComp/Organization/fundingCat[. = 'Industry']",null);
			var fDrugBiologics = model.getValue("instance('ins')/invDrugs",null);
			var finvDevice = model.getValue(".",contextNode);
			var fClinicalTrial = model.getValue("instance('ins')/clinicalTrial",null);
			var finance = "0";
			if(fundingCat == "Industry" || fDrugBiologics == "1" || finvDevice == "1" || fClinicalTrial == "1") {
				finance = "1";
			} else {
				finance = "0";
			}
			if(finance != "1") {
				model.setValue("instance('ins')/FACTSClinicalResearchStudyCategory", "");
				model.setValue("instance('ins')/facts_payment_option", "");
				model.setValue("instance('ins')/facts_payment_option_1", "");
				model.setValue("instance('ins')/facts_payment_option_2", "");
				model.setValue("instance('ins')/facts_payment_option_5", "");
			}
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td><span class="helpdialogOver" style="cursor:help;color:blue;padding:3px;"><img src="../fil/system/resources/ideate/imgs/questionMark.jpg"/><div style="width:200px"><p><span style="color:black"><help>The term ‘‘device’’ means an instrument, apparatus, implement, machine, contrivance, implant, in vitro reagent, or other similar or related article, including any component, part, or accessory, which is <br/>
			(1) recognized in the official National Formulary, or the United States Pharmacopeia, or any supplement to them,<br/>
			(2) intended for use in the diagnosis of disease or other conditions, or in the cure, mitigation, treatment, or prevention of disease, in man or other animals, or<br/>
			(3) intended to affect the structure or any function of the body of man or other animals, and which does not achieve its primary intended purposes through chemical action within or on the body of man or other animals and which is not dependent upon being metabolized for the achievement of its primary intended purposes. <br/>
		</help></span></p></div></span></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/invDevs = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="yesnobuttons"><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0, '', 'display:none')" name="style"/><td class="component   widestLabel"><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/bankingSpecimens" appearance="full" id="bankingSpecimens"><xf:label>Banking Specimens for Future Research</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/bankingSpecimens" appearance="full" id="bankingSpecimens"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			if(x != '1') {
				//Clear Specimen Banking
				model.setValue("instance('ins')/specDescribe", "");
				model.setValue("instance('ins')/specLength", "");
				model.setValue("instance('ins')/specAccess", "");
				model.setValue("instance('ins')/specInfo", "");
				model.setValue("instance('ins')/specimensWillBeReleased", "");
				var nl = model.selectNodeList("instance('ins')/Person[(invitation/@status!='author' or (invitation/@status='author' and role!='co')) and role!='nonProtocol' and not(name = preceding::name)]/@personnelResponsibleSpecimensObtain", null);
				for(var m = 0; m &lt; nl.length; m++) {
					model.setValue("instance('ins')/Person[(invitation/@status!='author' or (invitation/@status='author' and role!='co')) and role!='nonProtocol' and not(name = preceding::name)]["+(m + 1)+"]/@personnelResponsibleSpecimensObtain", "");
				}
				model.setValue("instance('ins')/specRelease", "");
				model.setValue("instance('ins')/specApproval", "");
				model.setValue("instance('ins')/specProvide", "");
				model.setValue("instance('ins')/specimensCanBeObtainedBy", "");
			}
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/bankingSpecimens = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="yesnobuttons"><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0, '', 'display:none')" name="style"/><td class="component   widestLabel"><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/instPRMC" appearance="full" id="instPRMC"><xf:label>Cancer Research that Requires Approval from the Protocol Review and Monitoring Committee (PRMC)</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/instPRMC" appearance="full" id="instPRMC"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			if(x != '1') {
				model.setValue("instance('ins')/instPRMCApp", "");
				var dl = model.getValue("instance('ins')/instPRMCAppLetter/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/instPRMCAppLetter/@uri", "");
				model.setValue("instance('ins')/instPRMCAppLetter/@docLink", "");
				model.setValue("instance('ins')/instPRMCAppLetter", "");				
			}
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/instPRMC = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="yesnobuttons"><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0, '', 'display:none')" name="style"/><td class="component   widestLabel"><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/clinicalTrial" appearance="full" id="clinicalTrial"><xf:label>Clinical Trial</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/clinicalTrial" appearance="full" id="clinicalTrial"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
		
			//Clear Financial Administration
			var fundingCat = model.getValue("instance('ins')/fundingSourceComp/Organization/fundingCat[. = 'Industry']",null);
			var fDrugBiologics = model.getValue("instance('ins')/invDrugs",null);
			var finvDevice = model.getValue("instance('ins')/invDevs",null);
			var fClinicalTrial = model.getValue(".",contextNode);
			var finance = "0";
			if(fundingCat == "Industry" || fDrugBiologics == "1" || finvDevice == "1" || fClinicalTrial == "1") {
				finance = "1";
			} else {
				finance = "0";
			}
			if(finance != "1") {
				model.setValue("instance('ins')/FACTSClinicalResearchStudyCategory", "");
				model.setValue("instance('ins')/facts_payment_option", "");
				model.setValue("instance('ins')/facts_payment_option_1", "");
				model.setValue("instance('ins')/facts_payment_option_2", "");
				model.setValue("instance('ins')/facts_payment_option_5", "");
			}
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/clinicalTrial = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="instructions"><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0, '', 'display:none')" name="style"/><td colspan="4"><span><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0, '', 'display:none')" name="style"/><div><component type="instructions">
		<visible xpath="count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0"/>
		<font size="1">			
			* A prospective biomedical or behavioral research study of human subjects that is designed to answer specific questions about biomedical or behavioral interventions (drugs, treatments, devices, or new ways of using known drugs, treatments, or devices). <br/>
			*  Used to determine whether new biomedical or behavioral interventions are safe, efficacious, and effective. <br/>			
		</font>
		<option type="widestLabel"/>
	</component></div></span></td></tr><tr class="yesnobuttons"><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0, '', 'display:none')" name="style"/><td class="component   widestLabel"><table style="margin-left:-3px;"><tr class="top"><td><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/invDrugs" appearance="full" id="invDrugs"><xf:label>Drugs / Biologics </xf:label><xf:hint>
		This includes the use of FDA-approved drugs/biologic when given in a way that differs from standard practice. For questions, please refer to http://www.mssm.edu/ids.
		The term "drug" means
		* (A) articles recognized in the official United States Pharmacopoeia, official Homoeopathic Pharmacopoeia of the United States, or official National Formulary, or any supplement to any of them; and
		* (B) articles intended for use in the diagnosis, cure, mitigation, treatment, or prevention of disease in man or other animals; and
		* (C) articles (other than food) intended to affect the structure or any function of the body of man or other animals; and articles intended for use as a component of any article specified in clause (A), (B), or (C).
		</xf:hint><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/invDrugs" appearance="full" id="invDrugs"><xf:label/><xf:hint>
		This includes the use of FDA-approved drugs/biologic when given in a way that differs from standard practice. For questions, please refer to http://www.mssm.edu/ids.
		The term "drug" means
		* (A) articles recognized in the official United States Pharmacopoeia, official Homoeopathic Pharmacopoeia of the United States, or official National Formulary, or any supplement to any of them; and
		* (B) articles intended for use in the diagnosis, cure, mitigation, treatment, or prevention of disease in man or other animals; and
		* (C) articles (other than food) intended to affect the structure or any function of the body of man or other animals; and articles intended for use as a component of any article specified in clause (A), (B), or (C).
		</xf:hint><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			//Clear Financial Administration
			var fundingCat = model.getValue("instance('ins')/fundingSourceComp/Organization/fundingCat[. = 'Industry']",null);
			var fDrugBiologics = model.getValue(".",contextNode);
			var finvDevice = model.getValue("instance('ins')/invDevs",null);
			var fClinicalTrial = model.getValue("instance('ins')/clinicalTrial",null);
			var finance = "0";
			if(fundingCat == "Industry" || fDrugBiologics == "1" || finvDevice == "1" || fClinicalTrial == "1") {
				finance = "1";
			} else {
				finance = "0";
			}
			if(finance != "1") {
				model.setValue("instance('ins')/FACTSClinicalResearchStudyCategory", "");
				model.setValue("instance('ins')/facts_payment_option", "");
				model.setValue("instance('ins')/facts_payment_option_1", "");
				model.setValue("instance('ins')/facts_payment_option_2", "");
				model.setValue("instance('ins')/facts_payment_option_5", "");
			}
			if(x != '1') {				
				if(model.getValue("count(instance('ins')/Drug)") * 1 != 0) {
					model.USA.removeALLMSSMDrugs(["main2"]);
				}
			}	
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td><span class="helpdialogOver" style="cursor:help;color:blue;padding:3px;"><img src="../fil/system/resources/ideate/imgs/questionMark.jpg"/><div style="width:200px"><p><span style="color:black"><help>
		This includes the use of FDA-approved drugs/biologic when given in a way that differs from standard practice. For questions, please refer to <a href="http://www.mssm.edu/ids" target="_blank">http://www.mssm.edu/ids</a>.<br/>
		The term "drug" means<br/>
		* (A) articles recognized in the official United States Pharmacopoeia, official Homoeopathic Pharmacopoeia of the United States, or official National Formulary, or any supplement to any of them; and<br/>
		* (B) articles intended for use in the diagnosis, cure, mitigation, treatment, or prevention of disease in man or other animals; and<br/>
		* (C) articles (other than food) intended to affect the structure or any function of the body of man or other animals; and articles intended for use as a component of any article specified in clause (A), (B), or (C).<br/>
		</help></span></p></div></span></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/invDrugs = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="instructions"><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0, '', 'display:none')" name="style"/><td colspan="4"><span><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0, '', 'display:none')" name="style"/><div><component type="instructions">
		<visible xpath="count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0"/>
		<font size="1">			
			* Drugs / Biologics That Are Not a Part of Standard Practice <br/>
			* Controlled Substances <br/>
			* Drugs / Biologics Supplied by the Research Sponsor or Purchased with Study Funds <br/>
		</font>
		<option type="widestLabel"/>
	</component></div></span></td></tr><tr class="yesnobuttons"><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0, '', 'display:none')" name="style"/><td class="component   widestLabel"><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/radiologicalProcedures" appearance="full" id="radiologicalProcedures"><xf:label>Radiological Procedures</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/radiologicalProcedures" appearance="full" id="radiologicalProcedures"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			if(x != '1') {
				model.setValue("instance('ins')/radiologicalProceduresDosimetry", "");
				var dl = model.getValue("instance('ins')/dosimetryChart/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/dosimetryChart/@uri", "");
				model.setValue("instance('ins')/dosimetryChart/@docLink", "");
				model.setValue("instance('ins')/dosimetryChart", "");				
				model.setValue("instance('ins')/involvesRadiologicalProcedures", "");
				model.setValue("instance('ins')/involvesStandardCareRadiologicalProceduresOnly", "");
			}
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/radiologicalProcedures = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="yesnobuttons"><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0, '', 'display:none')" name="style"/><td class="component   widestLabel"><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/involvesBiosafety" appearance="full" id="involvesBiosafety"><xf:label>Hazardous Materials</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/involvesBiosafety" appearance="full" id="involvesBiosafety"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			if(x != '1') {
				model.setValue("instance('ins')/dateOfInvolvingHazardousMaterials", "");
				model.setValue("instance('ins')/biosafetyLevel", "");
				model.setValue("instance('ins')/riskGroup", "");
				model.setValue("instance('ins')/geneTherapy", "");
				model.setValue("instance('ins')/largeScaleProductionVectors", "");
				model.setValue("instance('ins')/vitroSysApplications", "");
				model.setValue("instance('ins')/codeForToxinOncogeneUnToxin", "");
				model.setValue("instance('ins')/descInsertedGeneWillCode", "");
				model.setValue("instance('ins')/insertedGeneWillAlterRangeOrCell", "");				
				model.setValue("instance('ins')/descInsertedGeneWillAlter", "");
				model.setValue("instance('ins')/geneHaveReplicationCapacityOfVirus", "");
				model.setValue("instance('ins')/geneCapableOfAlteringHostCell", "");
				model.setValue("instance('ins')/wildVirusPresentInVector", "");
				model.setValue("instance('ins')/fractionWildVirusPresentInVector", "");
			}
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/involvesBiosafety = '', '', 'display:none')" name="style"/>Required</div></td></tr><tr class="instructions"><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0, '', 'display:none')" name="style"/><td colspan="4"><span><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0, '', 'display:none')" name="style"/><div><component type="instructions">
		<visible xpath="count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0"/>
		<font size="1">
			* Recombinant DNA <br/>
			* Viral Vectors <br/>
			* Plasmids <br/>
			* Bacterial Artificial Chromosomes <br/>
			* Toxic Chemicals, Potentially Toxic Medications, Carcinogens <br/>
			* Autologous Cell Lines <br/>
		</font>
	</component></div></span></td></tr><tr class="yesnobuttons"><ix:attr value="if(count(instance('ins')/researchInvolves[. = '2']) &gt; 0 or count(instance('ins')/researchInvolves[. = '3']) &gt; 0 or count(instance('ins')/appType[.='2']) &gt; 0 or count(instance('ins')/appType[.='3']) &gt; 0, '', 'display:none')" name="style"/><td class="component   widestLabel"><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="instance('ins')/requestingCRUResources" appearance="full" id="requestingCRUResources"><xf:label>Request Use of Clinical Research Unit Resources</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item></xf:select1></td><td class="noBox"><xf:select1 ref="instance('ins')/requestingCRUResources" appearance="full" id="requestingCRUResources"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
                model.recalculate();
                model.rebuild();
                model.refresh();
              </script><script ev:event="xforms-value-changed">
			x = model.getValue(".", contextNode);
			if(x != '1') {

				var m = model.selectNodeList("instance('ins')/Compensation", null);
				for(var i = m.length; i &gt; 0; i--){
					model.setValue("instance('ins')/Compensation["+ i +"]/compensationWhoWillPay", "");
					model.setValue("instance('ins')/Compensation["+ i +"]/compensationSpecifyWhoWillPay", "");
				}				
				
				//Clear Clinical Research Unit - Summary
				model.setValue("instance('ins')/studyWillUtilize", "");
				model.setValue("instance('ins')/includesStandardCare", "");
				model.setValue("instance('ins')/rareDiseaseStudy", "");
				model.setValue("instance('ins')/CRUPersonnel", "");
				model.setValue("instance('ins')/CRUFacilities", "");
				model.setValue("instance('ins')/descPerformedCRU", "");
				
				//Clear Clinical Research Unit - Requirements
				model.setValue("instance('ins')/totalNumberPatientsEvaluatedCRU", "");
				model.setValue("instance('ins')/outpatientVisits", "");
				model.setValue("instance('ins')/hoursPerVisit", "");
				model.setValue("instance('ins')/uniqueSituations", "");
				model.setValue("instance('ins')/timeDayTesting", "");
				model.setValue("instance('ins')/timeDayTestingSpecify", "");
				model.setValue("instance('ins')/specialNursingReqs", "");
				model.setValue("instance('ins')/specialNursingReqsSpecify", "");
				model.setValue("instance('ins')/specialInfectionControlReqs", "");
				model.setValue("instance('ins')/specialInfectionControlReqsSpecify", "");
				model.setValue("instance('ins')/fallsPrecaution", "");
				model.setValue("instance('ins')/seizurePrecaution", "");
				model.setValue("instance('ins')/patientsCareSelves", "");
				model.setValue("instance('ins')/requireNursingAssistance", "");
				model.setValue("instance('ins')/requireNursingAssistanceSpecify", "");
				model.setValue("instance('ins')/dietaryReqs", "");
				model.setValue("instance('ins')/dietaryReqsSpecify", "");
				
				//Clear Clinical Research Unit - Costs
				model.setValue("instance('ins')/totalCosts", "");
				model.setValue("instance('ins')/totalCRUCosts", "");
				model.setValue("instance('ins')/compTotalCRU", "");
				model.setValue("instance('ins')/totalCRU", "");
				var m = model.selectNodeList("instance('ins')/Cost", null);
				for(var i = m.length; i &gt; 0; i--){
					m[i-1].parentNode.removeChild(m[i-1]);
				}
				model.USA.refreshArea('Cost');
			}
			
			//onchange event for Procedure tab
			var bResearchInv = model.getValue("instance('ins')/researchInvolves",null);
			var bExSummary = model.getValue("instance('ins')/exemptSurveyInstruments",null);
			var bAppType = model.getValue("instance('ins')/appType",null);
			var bCRUnit = model.getValue("instance('ins')/requestingCRUResources",null);
			var procedures = (bResearchInv == "2" || bResearchInv == "3" || bExSummary == "1" || (bAppType == "2" &amp;&amp; bCRUnit == "1") || (bAppType == "3" &amp;&amp; bCRUnit == "1")) ? "1" : "0";
			if(procedures != 1) {
			
				//Clear Procedures - Narrative
				model.setValue("instance('ins')/studyDesignDescription", "");
				model.setValue("instance('ins')/proceduresDescription", "");
				model.setValue("instance('ins')/sourceRecordsDescription", "");
				model.setValue("instance('ins')/dataCollectedDescription", "");
				
				//Clear Procedures - Genetic Testing
				model.setValue("instance('ins')/geneticTesting", "");
				model.setValue("instance('ins')/geneticTestingForClinicalPurposes", "");
				
				//Clear Procedures - Details
				model.setValue("instance('ins')/survey", "");
				model.setValue("instance('ins')/typeInstruments", "");				
				model.setValue("instance('ins')/standardizedInstruments", "");
				model.setValue("instance('ins')/investigatorInstrumentsDescription", "");
				model.setValue("instance('ins')/avTaping", "");
				model.setValue("instance('ins')/avTapingSubjectsIdentifiable", "");
				model.setValue("instance('ins')/avTapingMediaDiscarded", "");
				model.setValue("instance('ins')/avTapingMediaStorageDuration", "");
				model.setValue("instance('ins')/avTapingMediaStorageConfidentiality", "");
				model.setValue("instance('ins')/avTapingMediaShared", "");
				model.setValue("instance('ins')/avTapingRequiredForParticipation", "");
				model.setValue("instance('ins')/deception", "");
				model.setValue("instance('ins')/deceptionNotes", "");
				model.setValue("instance('ins')/shareResults", "");
				model.setValue("instance('ins')/descShareResults", "");
				model.setValue("instance('ins')/descShareResultsWhen", "");								
			}
			
			//Clear Procedures - Instruments
			var bInstrumentsBeingUsed = model.getValue("instance('ins')/typeInstruments", null);
			var bExSummary = model.getValue("instance('ins')/exemptSurveyInstruments",null);
			if(bExSummary != '1' &amp;&amp; bInstrumentsBeingUsed.indexOf('2') &lt; 0) {
				var nl = model.selectNodeList("instance('ins')/instruments", null);
				for(var m = 0; m &lt; nl.length; m++) {
					var dl = model.getValue("instance('ins')/instruments["+(m + 1)+"]/document/@docLink", null);
					if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				}
				for(var m = 0; m &lt; nl.length; m++) {
					nl[m].parentNode.removeChild(nl[m]);
				}
				model.USA.refreshArea('instruments');
			}
			
			//Clear Procedures - Compensation
			var cResearchInv = model.getValue("instance('ins')/researchInvolves",null);
			var cAppType = model.getValue("instance('ins')/appType",null);
			var cCRUnit = model.getValue("instance('ins')/requestingCRUResources",null);
			var compensation = (cResearchInv == "2" || cResearchInv == "3" || (bAppType == "2" &amp;&amp; bCRUnit == "1") || (bAppType == "3" &amp;&amp; bCRUnit == "1")) ? "1" : "0";
			if(compensation != '1') {
				model.setValue("instance('ins')/compParticipation", "");
				model.setValue("instance('ins')/compTotal", "");
				model.setValue("instance('ins')/compTotalCRU", "");
				var m = model.selectNodeList("instance('ins')/Compensation", null);
				for(var i = m.length; i &gt; 0; i--){
					m[i-1].parentNode.removeChild(m[i-1]);
				}
				model.USA.refreshArea('Compensation');
			}
			
			model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
		</script></xf:select1></td></tr></table></td><td class="options"/><td class="errors custError"><div><ix:attr value="if(instance('ins')/requestingCRUResources = '', '', 'display:none')" name="style"/>Required</div></td></tr></table></div></div><div class="bottomNav"><table><tr><td class="back"><div class="nav" style="float:right"><script ev:event="click">
                    model.Frm.navigateTo("previousTab");
                  </script><div style="float:left" class="command">previous</div><img style="float:right" src="../fil/system/resources/ideate/imgs/left.png"/></div></td><td class="next"><div class="nav" style="float:left"><script ev:event="click">
                    model.Frm.navigateTo("nextTab");
                  </script><img style="float:left" src="../fil/system/resources/ideate/imgs/right.png"/><div style="float:right" class="command">next</div></div></td></tr></table><div style="text-align:center; font-size:10px;margin-top:30px;">© <xf:output value="script('copywrite(2012)')"/></div></div></form>