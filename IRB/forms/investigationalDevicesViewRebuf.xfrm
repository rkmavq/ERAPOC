<?xml version="1.0" encoding="UTF-8"?>
<form xmlns="http://www.w3.org/2002/06/xhtml2" xmlns:ix="http://itensil.com/ns/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:exf="http://www.exforms.org/exf/1-0" xmlns:xf="http://www.w3.org/2002/xforms"><xf:model id="fmodel"><xf:instance id="ins"><data/></xf:instance><xf:instance id="meta"><data/></xf:instance><xf:instance id="cats"><data/></xf:instance><xf:instance id="review"><data/></xf:instance><xf:instance id="form"><data><tabID>9a</tabID><ping>0</ping><AMD/><form updatedBy="" updated="" createdBy="" created=""/><tempRevIndex>-1</tempRevIndex><tempSugIndex>1</tempSugIndex><searchText/><searchAddNew/><records/><fullSearchText/><fullSearchRecords/><col1/><col2/><col3/><document/><temp/><someVariable id=""/><fragmentId/><comp uri=""/><loggedInUserId/><loggedInUserName/><pagemode/></data></xf:instance><xf:instance id="bootstrap"><data><js>/resources/services/appForms/main.js</js></data></xf:instance><xf:instance id="config"><data/></xf:instance><xf:instance id="baseOp"><data/></xf:instance><script ev:event="xforms-model-construct-done">
      bootstrapSharedXfrm(model);
      model.Frm = new appForm(model, "investigationalDevices");
      
      
      
      model.setValue("instance('form')/loggedInUserId", model.Frm.getLoggedInUserId()); 
      model.setValue("instance('form')/loggedInUserName", model.Frm.getLoggedInUserName()); 
      
      model.setValue("instance('form')/pagemode", model.Frm.getMode()); 
      
      
        //model.Frm.loadAppFile('ins', "/data/irb.xml", "1");
        
        
        
        
          if(model.Frm.formSet.getRoot().__AMND){
            model.Frm.loadOpFile('ins', model.Frm.formSet.getRoot().__COMPREVURI, "1");
          }else{
            model.Frm.loadAppFile('ins', model.Frm.formSet.getRoot().__REVURI, "1");
          }
          model.Frm.loadAppFile('meta', "/data/projectData.xml", "0");model.Frm.loadAppFile('cats', "/data/catagories.xml", "0");
          if(model.Frm.formSet.getRoot().__AMND){
          model.Frm.loadOpFile('review', model.Frm.formSet.getRoot().__COMPREVURI, "1");
          model.Frm.loadOpFile('ins', model.Frm.formSet.getRoot().__COMPREVURI, "1");
          }else{
          model.Frm.loadAppFile('review', model.Frm.formSet.getRoot().__REVURI, "1");
          }
          
          if (model.Frm.formSet.getRoot().__REVURI.indexOf("/reviews") &gt; -1) model.Frm.revewMode = -1;
          
        
      model.Frm.loadMetaData();
      
      
        includeSharedJS("/resources/applications/IRB/js/clientSideFunctions.js");
        model.USA = new irbProtocol(model);
      
      model.refresh();
      model.rebuild();
      model.recalculate();
      <script ev:event="xforms-value-changed">
          //model.USA.registerChangeLog('review', '9a')
          //model.USA.registerChangeLog('ins', '9a')
          model.USA.registerChangeLog('comments', '9a')
        </script></script><script ev:event="xforms-ready"/><xf:submission instance="ins" id="submitins" replace="none" method="put"><xf:action ev:event="xforms-submit-done"/><xf:action ev:event="xforms-submit-error"><xf:message level="ephemeral">Problem saving (ins)</xf:message></xf:action></xf:submission><xf:submission instance="review" id="submitreview" replace="none" method="put"><xf:action ev:event="xforms-submit-done"/><xf:action ev:event="xforms-submit-error"><xf:message level="ephemeral">Problem saving (review)</xf:message></xf:action></xf:submission><xf:bind relevant="true()" readonly="false()" nodeset="instance(ins)//*"/><xf:bind relevant="true()" readonly="false()" nodeset="instance(meta)//*"/><xf:bind relevant="true()" readonly="false()" nodeset="instance(cats)//*"/><xf:bind readonly="true()" nodeset="//link/@title"/><xf:bind nodeset="instance('form')/document" type="ix:file"/><xf:bind readonly="true()" nodeset="instance('ins')/fundingSourceComp/Organization//*"/><xf:bind readonly="true()" nodeset="instance('ins')/fundingSourceComp/Organization//@*"/><xf:bind readonly="true()" nodeset="instance('ins')/fundingSourceComp/Person//*"/><xf:bind readonly="true()" nodeset="instance('ins')/fundingSourceComp/Person//@*"/></xf:model><script ev:event="xforms-value-changed">
          model.USA.___EVAL_CHANGE_ON_SAVE = true;
        </script><style>
          div.formFrame div.commentBox{
          background-color:white;
          border: 2px solid gray;
          padding: 5px;
          width: 500px;
          }
          
          div.formFrame div.commentBox div.xfctrl{
          background-color:none;
          }
          
          div.formFrame div.commentBox div.xfctrl label{
          width:100px;
          }
          
          div.formFrame div.commentBox div.xfctrl textarea{
          width:390px;
          }
          
          
          div.formFrame td.custError{
          background-color:none;
          border:none;
          vertical-align:top;
          width:200px;
          padding-left:10px;
          color:red;
          font-weight:bold;
          }
          
          div.formFrame td.custError div.xfctrl tr{
            background-color:#f3f6fb !important;
          }
          
          div.formFrame td.custError div.xfctrl tr td{
            background-color:#f3f6fb !important;
          }
          
          div.formFrame tr td.custError div.xfctrl{
            background-color:#f3f6fb !important;
          }
          
          div.formFrame td.custError div{
          background-color:#f3f6fb !important;
          }
          
          div.formFrame td.custError .xfctrl{
            background-color:#f3f6fb !important;
          }
          
          div.formFrame table.fullColLayout tr td.custError div.xfctrl{
          background-color:none;
          }
          
          
          .wikiView div.formFrame table.fullColLayout tr td.custError div.xfctrl textarea {
          margin-top:10px;
          }
          
          .wikiView div.formFrame table.fullColLayout tr td.custError div.xfctrl {
            position:static;
            border-color:white;
          }
          div.formFrame tr td.custError div.xfctrl{
            position:static;
            border-color:white;
          }          
          
          .wikiView div.formFrame table.basicColLayout tr td.custError div.xfctrl textarea  {
            margin-top:10px;
          }
          
        </style><ix:template name="QuickSearch"><div style="padding:8px;width:400px"><table style="width:240px"><tr><td><xf:input id="searchBox" ref="instance('form')/searchText" style="width:140px"><xf:label style="width:50px">Lookup:</xf:label></xf:input></td><td><div style="margin-right:20px;"><u class="link" style="color:blue;cursor:pointer;text-decoration:underline;">Go</u><script ev:event="click">
                  model.Frm.executeQuickSearch();  
                </script></div></td></tr></table><hr/><xf:switch><xf:case exf:if="1" id="hide-quicksearch"/><xf:case id="show-quicksearch"><exf:variable name="records" value="instance('form')/records//rec"/><exf:variable name="pingVar" value="instance('form')/ping"/><div><ix:attr name="style" value="if($pingVar &gt; 0 and $pingVar &gt; 20, '', 'display:none')"/><h3><xf:output value="instance('form')/ping"/> records available, displaying the top 20 rows. Please use the Lookup box to search.</h3></div><div><ix:attr name="style" value="if($pingVar &gt; 0 and $pingVar &lt; 20, '', 'display:none')"/><h3><xf:output value="instance('form')/ping"/> records available, displaying <xf:output value="instance('form')/ping"/> rows. Please use the Lookup box to search.</h3></div><div><ix:attr name="style" value="if(count($records)=0, '', 'display:none')"/><h1>No Matches</h1><div><ix:attr value="if(instance('form')/searchAddNew='1', 'margin-left:10px;margin-top:20px;', 'display:none')" name="style"/>...please refine your search, <br/><br/><span style="margin-left:20px;">or 
                    <u style="cursor:pointer;color:blue">request that this <xf:output value="script('model.Frm.quickSearch.addNew.entName;')"/> be added to the system.
                      
                      <xf:action ev:event="click"><xf:setvalue value="instance('form')/searchText" ref="instance('form')/t[@i='1']"/><ix:dialog style="width:400px;" id="newValue" title="Add New Value" class="quickSearchDialog"><xf:repeat nodeset="instance('form')/t[@l!='']"><xf:input ref="."><ix:attr value="if(@t='text', 'width:400px;', 'display:none')" name="style"/><xf:label style="width:150px;"><xf:output value="@l"/></xf:label></xf:input><xf:select ref="." appearance="full"><ix:attr value="if(@t='yn', 'margin-left:150px;width:250px;', 'display:none')" name="style"/><xf:item><xf:label><xf:output value="@l"/></xf:label><xf:value>1</xf:value></xf:item></xf:select></xf:repeat><br/><table style=""><tr><td style="margin-right:10px;"><xf:trigger style="background-color:#DDDDDD;border-color:black;"><xf:label>Add</xf:label><xf:action ev:event="DOMActivate"><script>
                                      model.Frm.addFromQuickSearch();
                                    </script><xf:close ev:event="DOMActivate"/></xf:action></xf:trigger></td><td style="width:50%"><xf:trigger style="background-color:#DDDDDD;border-color:black;"><xf:label>Cancel</xf:label><xf:action ev:event="DOMActivate"><script>model.Frm.resetQuickSearch()</script><xf:close ev:event="DOMActivate"/></xf:action></xf:trigger></td></tr></table></ix:dialog></xf:action></u></span></div></div><div><ix:attr value="if(count($records) &gt; 150, '', 'display:none')" name="style"/><h1>Too Many Matches</h1>Please refine your search.</div><table class="quickSearchMatches"><ix:attr value="if(count($records) &lt;= 500 and count($records) &gt; 0, '', 'display:none')" name="style"/><tr><th style="text-align:left;"><xf:output value="instance('form')/col1"/></th><th style="text-align:left;padding-left:20px"><xf:output value="instance('form')/col2"/></th><th style="text-align:left;padding-left:20px"><xf:output value="instance('form')/col3"/></th></tr><xf:repeat nodeset="$records"><tr><td style="vertical-align:top; width:33%"><u class="clickable"><xf:output value="(attribute::node())[position()=script('SH.is_ie ? 4 : 3')]"/><xf:close ev:event="click"/><script ev:event="click"> 
                              var indx = model.getValue("@id", contextNode);
                              var val = model.getValue("@name", contextNode);
                              if(val == "") val = model.getValue("(attribute::node())[position()=script('SH.is_ie ? 4 : 3')]", contextNode);
                              model.Frm.quickSearchSelect(indx, val);
                              var code = model.Frm.quickSearch.code;
                              if(code) eval(code);
                              if(model.Frm.quickSearch.save) model.Frm.saveAll();
                              event.stopPropagation();
                            </script></u></td><td style="vertical-align:top;padding-left:20px; width:30%"><xf:output value="if(instance('form')/col2 and instance('form')/col2 != '', (attribute::node())[position()=script('SH.is_ie ? 3 : 2')], '')"/></td><td style="vertical-align:top;padding-left:20px; width:30%"><xf:output value="if(instance('form')/col3 and instance('form')/col3 != '', (attribute::node())[position()=script('SH.is_ie ? 2 : 1')], '')"/></td></tr></xf:repeat></table><br/><br/></xf:case></xf:switch></div></ix:template><div class="formFrame" id="allcontrols"><div style="display:none;"><xf:input id="documentDrop" ref="instance('form')/document"><xf:action ev:event="xforms-value-changed" exf:if="instance('form')/document != ''"><script> 
                var n = model.getValue(".", contextNode);
                if(n != "") model.Frm.linkFile(n);
                document.__UPLOADTYPE = "";//Re-setting the value
              </script></xf:action></xf:input></div><table class="formMetaLine"><tr/></table><div class="body"><h1/><table class="basicColLayout"><tr class="repeaterTitle"><td><h1/></td></tr><tr class="repeater"><td class="repeatedSection" colspan="3"><xf:switch><xf:case exf:if="1" id="show-main2"><exf:variable value="instance('ins')/Device" name="nsmain2"/><xf:repeat nodeset="$nsmain2"><exf:variable value="@id" name="nsXMLKEYmain2"/><exf:variable value="@id" name="nsXMLKEY"/><table><tr><td><table class="basicColLayout"><tr class="box"><exf:variable value="$passedmarkupMode" name="markupMode"/><exf:variable value="$mode" name="mode"/><td class="subcomponent component textarea   widenLabel "><xf:textarea class="" ref="mssmDevice"><xf:label>Investigational Device Name</xf:label><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:textarea></td></tr><tr class="instructions"><td colspan="4" class="subcomponent"><div><subcomponent type="instructions">
            Include a brief description of the device, its purpose, how it is used and how it differs from existing devices.
		</subcomponent></div></td></tr><tr class="box"><exf:variable value="$passedmarkupMode" name="markupMode"/><exf:variable value="$mode" name="mode"/><td class="subcomponent component textarea   widenLabel "><xf:textarea class="" ref="deviceDescribe"><xf:label>Description of Device</xf:label><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:textarea></td></tr><tr class="yesnobuttons"><td class="subcomponent component  widenLabel "><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="ideStudy" appearance="full"><xf:label>Study Is Being Done Under an Investigational Device Exemption (IDE)</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td><td class="noBox"><xf:select1 ref="ideStudy" appearance="full"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
			
			
			
				x = model.getValue(".", contextNode);
				if(x == "0") {
					model.setValue("instance('ins')/Device/deviceIDE", "");
					model.setValue("instance('ins')/Device/deviceSponsor", "");
					model.setValue("instance('ins')/Device/deviceSponsorName", "");
					model.setValue("instance('ins')/Device/invManufactured", "");
				} else if(x == "1") {
					model.setValue("instance('ins')/Device/deviceMeetsAbbreviatedIDE", "");
					model.setValue("instance('ins')/Device/deviceMeetsExemptionCategory", "");				
					var refID = model.getValue("instance('ins')/Device/@ref", contextNode);
					model.setValue("instance('ins')/Device/deviceExemptionCategory", "");					
					model.setValue("instance('ins')/Device/deviceExemptionJustification", "");					
					var dl = model.getValue("instance('ins')/Device/deviceFDAApprovedLabeling/@docLink",null);
					if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
					model.setValue("instance('ins')/Device/deviceFDAApprovedLabeling/@uri", "");
					model.setValue("instance('ins')/Device/deviceFDAApprovedLabeling/@docLink", "");
					model.setValue("instance('ins')/Device/deviceFDAApprovedLabeling", "");
				}
				model.recalculate();
				model.refresh();
				model.USA.rebuildTabs();
				model.activateCase("hide-nrd");
				model.activateCase("show-nrd");
			     
		</script><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td></tr></table></td></tr><tr class="field"><ix:attr value="if(ideStudy = '1', '', 'display:none')" name="style"/><td class="component subcomponent  widenLabel "><xf:input class="wide" ref="deviceIDE"><xf:label>IDE #</xf:label><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:input></td></tr><tr class="radiobuttons"><ix:attr value="if(ideStudy = '1', '', 'display:none')" name="style"/><td class="subcomponent component  widenLabel "><xf:select1 ref="deviceSponsor" appearance="full"><xf:label>Sponsor (Holder of the IDE)</xf:label><xf:repeat nodeset="instance('cats')/deviceSponsor/type"><xf:item><xf:label><xf:output value="@name"/></xf:label><xf:value><xf:output value="@id"/></xf:value></xf:item></xf:repeat><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td></tr><tr class="field"><ix:attr value="if(ideStudy = '1', '', 'display:none')" name="style"/><td class="component subcomponent  widenLabel "><xf:input class="wide" ref="deviceSponsorName"><xf:label>Specify Name of Sponsor</xf:label><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:input></td></tr><tr class="yesnobuttons"><ix:attr value="if(ideStudy = '1', '', 'display:none')" name="style"/><td class="subcomponent component  widenLabel "><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="invManufactured" appearance="full"><xf:label>Device Is Investigator Manufactured</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td><td class="noBox"><xf:select1 ref="invManufactured" appearance="full"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
			
			
			
			
				x = model.getValue(".", contextNode);
				if(x != "1") {
					model.setValue("instance('ins')/Device/descInvManufactured", "");
					model.setValue("instance('ins')/Device/storagePolicy", "");					
				} 
				model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
			    
		</script><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td></tr></table></td></tr><tr class="box"><ix:attr value="if(invManufactured = '1', '', 'display:none')" name="style"/><exf:variable value="$passedmarkupMode" name="markupMode"/><exf:variable value="$mode" name="mode"/><td class="subcomponent component textarea   widenLabel "><xf:textarea class="" ref="descInvManufactured"><xf:label>Arrangements and Precautions Taken To Ensure Proper Manufacturing of Device</xf:label><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:textarea></td></tr><tr class="instructions"><ix:attr value="if(ideStudy = '0', '', 'display:none')" name="style"/><td colspan="4" class="subcomponent"><div><subcomponent type="instructions">
			<visible xpath="ideStudy = '0'"/>
            The FDA defines the term noninvasive as the use of a diagnostic device or procedure that does not by design or intention: <br/> 
			* (1) Penetrate or pierce the skin or mucous membranes of the body, the ocular cavity, or the urethra, or <br/> 
			* (2) enter the ear beyond the external auditory canal, the nose beyond the nares, the mouth beyond the pharynx, the anal canal beyond the rectum, or the vagina beyond the cervical os. For purposes of this part, blood sampling that involves simple venipuncture is considered noninvasive, and the use of surplus samples of body fluids or tissues that are left over from samples taken for non-investigational purposes is also considered noninvasive. <br/> 
		</subcomponent></div></td></tr><tr class="yesnobuttons"><ix:attr value="if(ideStudy = '0', '', 'display:none')" name="style"/><td class="subcomponent component  widenLabel "><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="deviceMeetsExemptionCategory" appearance="full"><xf:label>Device Meets One of the Following Categories for Exemption</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td><td class="noBox"><xf:select1 ref="deviceMeetsExemptionCategory" appearance="full"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">		
			
			
			
			
				x = model.getValue(".", contextNode);
				if(x != "1") {
					model.setValue("instance('ins')/Device/deviceExemptionCategory", "");					
					model.setValue("instance('ins')/Device/deviceExemptionJustification", "");					
					var dl = model.getValue("instance('ins')/Device/deviceFDAApprovedLabeling/@docLink",null);
					if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
					model.setValue("instance('ins')/Device/deviceFDAApprovedLabeling/@uri", "");
					model.setValue("instance('ins')/Device/deviceFDAApprovedLabeling/@docLink", "");
					model.setValue("instance('ins')/Device/deviceFDAApprovedLabeling", "");					
				} 
				else {
					model.setValue("instance('ins')/Device/deviceMeetsAbbreviatedIDE", "");
				}
				model.recalculate();
			model.refresh();
			model.USA.rebuildTabs();
			model.activateCase("hide-nrd");
            model.activateCase("show-nrd");
				
		</script><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td></tr></table></td></tr><tr class="instructions"><ix:attr value="if(ideStudy = '0', '', 'display:none')" name="style"/><td colspan="4" class="subcomponent"><div><subcomponent type="instructions">
			<visible xpath="ideStudy = '0'"/>
            Category 1: <br/>
			* The device was not regulated as a drug before enactment of the Medical Device Amendments (transitional device). <br/>
			* The device is FDA-approved/cleared. <br/> 
			* The device Is being used or investigated in accordance with the indications in the FDA approved/cleared labeling. <br/>
			<br/> 
			Category 2: <br/>
			* The device is a diagnostic device. <br/>
			* The sponsor will comply with applicable requirements in 21 CFR 809.10(c). <br/>
			* The testing is noninvasive. <br/>
			* The testing does not require an invasive sampling procedure that presents significant risk. <br/>
			* The testing does not by design or intention introduce energy into a subject <br/>
			* The testing is not used as a diagnostic procedure without confirmation of the diagnosis by another, medically established diagnostic product or procedure. <br/>
			<br/>
			Category 3: <br/>
			* The device is undergoing consumer preference testing, testing of a modification, or testing of a combination of two or more devices in commercial distribution, and the testing is not for the purpose of determining safety or effectiveness and does not put subjects at risk. <br/>
			<br/> 
			Category 4: <br/>
			* The device is a custom device as defined in 21 CFR 812.3(b), unless the device is being used to determine safety or effectiveness for commercial distribution. <br/>
		</subcomponent></div></td></tr><tr class="radiobuttons"><ix:attr value="if(deviceMeetsExemptionCategory = '1', '', 'display:none')" name="style"/><td class="subcomponent component  widenLabel "><xf:select1 ref="deviceExemptionCategory" appearance="full"><xf:label>Category for Exemption</xf:label><xf:repeat nodeset="instance('cats')/deviceExemptionCategory/type"><xf:item><xf:label><xf:output value="@name"/></xf:label><xf:value><xf:output value="@id"/></xf:value></xf:item></xf:repeat><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td></tr><tr class="box"><ix:attr value="if(deviceMeetsExemptionCategory = '1', '', 'display:none')" name="style"/><exf:variable value="$passedmarkupMode" name="markupMode"/><exf:variable value="$mode" name="mode"/><td class="subcomponent component textarea   widenLabel "><xf:textarea class="" ref="deviceExemptionJustification"><xf:label>Justification for Meeting Criteria</xf:label><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:textarea></td></tr><tr class="document"><ix:attr value="if(deviceExemptionCategory = '1', '', 'display:none')" name="style"/><td class="component subcomponent  widenLabel "><table class="oneToManyBox"><tr><td class="label">FDA Approved Labeling</td><td style="border:none;" class=""><span><ix:attr value="if(deviceFDAApprovedLabeling != '', '', 'display:none')" name="style"/><a target="_blank_"><ix:attr value="deviceFDAApprovedLabeling/@uri" name="href"/><xf:output class="" value="deviceFDAApprovedLabeling"/></a></span><span class="clickable"><ix:attr value="if(deviceFDAApprovedLabeling != '', 'display:none', '')" name="style"/><script ev:event="click"> 
                var key = model.getValue("@id", contextNode);
                
                  model.Frm.DOC_NEW_STATUS = "New";            /////////
                  model.Frm.DOC_NEW_DECISION = "Pending";      /////////
                  //model.Frm.DOC_REFRESHSECTION= "deviceFDAApprovedLabeling";
                  //////////////////////////////////////////////////////
                  model.Frm.docUpload.manualLabel = "FDA Approved Labeling";
                              
                model.Frm.configureDocUpload("replaceValue", "instance('ins')/Device[@id='" + key + "']/deviceFDAApprovedLabeling", "", "", event.uiEvent.clientX, event.uiEvent.clientY);
                model.Frm.executeDocUpload(); 
              </script> 
              Attach <img src="../fil/system/resources/ideate/imgs/dialogGraphic.png"/></span></td><td class="control"><span style="" class="dialogOverInteractive clickable"><ix:attr value="if(deviceFDAApprovedLabeling != '', '', 'display:none')" name="style"/>Replace
                <script ev:event="click">
                  //required because this needs to be set for us to replicate the attachment page functionality (re: calling addDocSafe, etc.)
                  if(model.Frm.formSet.getRoot().__AMND){
                    model.Frm.loadOpFile('dat', model.Frm.formSet.getRoot().__COMPREVURI, "1");
                    model.Frm.DOC_SRCDOC = model.Frm.linkedOpURI + model.Frm.formSet.getRoot().__COMPREVURI;
                  }else{
                    model.Frm.loadAppFile('dat', model.Frm.formSet.getRoot().__REVURI, "1");
                    model.Frm.DOC_SRCDOC = model.Frm.targetURI + model.Frm.formSet.getRoot().__REVURI;  //Need to replace docStack and docAdd in appForms/main.js
                  }
                  
                  //Modified so it could find the right childen element for the docLink based on the context - similar should work for repeaters
                  //var toChange = model.getValue("instance('')/deviceFDAApprovedLabeling/@docLink");
                  var toChange = model.getValue("deviceFDAApprovedLabeling/@docLink", contextNode);
                  //AB 01/27/2020 added below line to find the @id
                  var po = model.getValue("@id", contextNode);
                  //return;
                  
                  var docXpath = "document[@uid='"+toChange+"']";
                 
                  //alert("docXpath = " + docXpath);
                  model.Frm.OldDocComms = model.getValue("instance('ins')/" + docXpath + "/" + "@decisioncomments");
                  model.Frm.OldDocStatus = model.getValue("instance('ins')/" + docXpath + "/" + "@status");
                model.Frm.OldDocId = toChange;
                model.Frm.DOC_NEW_UPLOAD_OP = "newVersion"; //THIS FORCES THE UPLOAD TO ADD A NEW VERSION
                //AB 01/27/2020 added below to store doc path to update related system document once document node is replaced
                model.Frm.DOC_REFRESHSECTION = "deviceFDAApprovedLabeling"; 
                  model.Frm.DOC_DPATH = "instance('ins')/Device[@id='" + po + "']/deviceFDAApprovedLabeling"; 
                  model.Frm.configureEnhancedDocUpload("replaceValue",contextNode, "this.model.USA.docReplaced()", "", event.uiEvent.clientX, event.uiEvent.clientY, '');
                //model.Frm.configureEnhancedDocUpload("replaceValue",contextNode, "this.model.USA.docReplaced()", "", 0, 0, '');
                model.Frm.executeDocUpload();
                model.Frm.docUpload.dop = ""; //new
                model.Frm.docUpload.duid = toChange;
                model.activateCase("hide-Device");
                model.activateCase("show-Device");    
                </script></span></td></tr></table></td></tr><tr class="instructions"><ix:attr value="if(deviceMeetsExemptionCategory = '0', '', 'display:none')" name="style"/><td colspan="4" class="subcomponent"><div><subcomponent type="instructions">
			<visible xpath="deviceMeetsExemptionCategory = '0'"/>
            A device is classified as a significant risk device if it meets any of the following criteria. If none of the following are true, then the device is non-significant risk. <br/>
			* Is intended as an implant and presents a potential for serious risk to the health, safety, or welfare of a subject. <br/>
			* Is purported or represented to be for a use in supporting or sustaining human life and presents a potential for serious risk to the health, safety, or welfare of a subject. <br/>
			* Is for a use of substantial importance in diagnosing, curing, mitigating, or treating disease, or otherwise preventing impairment of human health and presents a potential for serious risk to the health, safety, or welfare of a subject. <br/>
		</subcomponent></div></td></tr><tr class="yesnobuttons"><ix:attr value="if(deviceMeetsExemptionCategory = '0', '', 'display:none')" name="style"/><td class="subcomponent component  widenLabel "><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="deviceMeetsAbbreviatedIDE" appearance="full"><xf:label>Device Meets the Following Criteria for an Abbreviated IDE</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td><td class="noBox"><xf:select1 ref="deviceMeetsAbbreviatedIDE" appearance="full"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">		
			
			
			
			
				x = model.getValue(".", contextNode);
				if(x != "1"){
					model.setValue("instance('ins')/Device/deviceAbbreviatedIDEJustification", "");					
				}
				model.recalculate();
				model.refresh();
				model.USA.rebuildTabs();
				model.activateCase("hide-nrd");
				model.activateCase("show-nrd");
				
		</script><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td></tr></table></td></tr><tr class="instructions"><ix:attr value="if(deviceMeetsExemptionCategory = '0', '', 'display:none')" name="style"/><td colspan="4" class="subcomponent"><div><subcomponent type="instructions">
			<visible xpath="deviceMeetsExemptionCategory = '0'"/>
            * The investigator asserts that the device is a non-significant risk device (include justification for this assessment). <br/>
			* The device is not banned by the FDA. <br/>
			* The investigator will label the device in accordance with FDA regulations (21 CFR 812.5). <br/>
			* The consent will be obtained and documented in accordance with FDA regulation. <br/>
			* The investigator will comply with FDA requirements for monitoring investigations (21 CFR 812.46). <br/>
			* The investigator will comply with FDA requirements for records and reports (21 CFR 812.140, 21 CFR 812.150). <br/>
			* The investigator will not market or promote the device (21 CFR 812.7). <br/>
		</subcomponent></div></td></tr><tr class="box"><ix:attr value="if(deviceMeetsAbbreviatedIDE = '1', '', 'display:none')" name="style"/><exf:variable value="$passedmarkupMode" name="markupMode"/><exf:variable value="$mode" name="mode"/><td class="subcomponent component textarea   widenLabel "><xf:textarea class="" ref="deviceAbbreviatedIDEJustification"><xf:label>Justification for Meeting Criteria</xf:label><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:textarea></td></tr><tr class="instructions"><td colspan="4" class="subcomponent"><div><subcomponent type="instructions">			
            Describe the policies and procedures for storage, handling and control of distribution of the investigational device so that the device will only be administered by authorized investigators and will only be used in subjects that have agreed to take part in the research.
		</subcomponent></div></td></tr><tr class="box"><exf:variable value="$passedmarkupMode" name="markupMode"/><exf:variable value="$mode" name="mode"/><td class="subcomponent component textarea   widenLabel "><xf:textarea class="" ref="storagePolicy"><xf:label>Policies and Procedures for Storage, Handling and Control of Distribution of Device</xf:label><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:textarea></td></tr><tr class="yesnobuttons"><td class="subcomponent component  widenLabel "><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="noCost" appearance="full"><xf:label>Sponsor Will Provide Device at No Cost for Research Subjects</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td><td class="noBox"><xf:select1 ref="noCost" appearance="full"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
			
			
			
				x = model.getValue(".", contextNode);
				if(x != "0"){
					model.setValue("instance('ins')/Device/descCost", "");					
				}
				model.rebuild();
					model.refresh();
					model.recalculate();
			     
		</script><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td></tr></table></td></tr><tr class="yesnobuttons"><td class="subcomponent component  widenLabel "><table class="horizontalSelects"><tr><td class="yesBox"><xf:select1 ref="cmsApprovalDocPresent" appearance="full"><xf:label>Do you have a CMS Approval Letter?</xf:label><xf:item><xf:label>Yes</xf:label><xf:value>1</xf:value></xf:item><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td><td class="noBox"><xf:select1 ref="cmsApprovalDocPresent" appearance="full"><xf:label/><xf:item><xf:label>No</xf:label><xf:value>0</xf:value></xf:item><script ev:event="xforms-value-changed">
			
			
			
			
				x = model.getValue(".", contextNode);
				if(x != "1") {
				var dl = model.getValue("instance('ins')/Device/cmsApprovalDoc/@docLink",null);
				if(dl) model.Frm.deleteDocumentRef(dl, 'ins');
				model.setValue("instance('ins')/Device/cmsApprovalDoc/@uri", "");
				model.setValue("instance('ins')/Device/cmsApprovalDoc/@docLink", "");
				model.setValue("instance('ins')/Device/cmsApprovalDoc", "");										
				} 
				model.rebuild();
				model.refresh();
				model.recalculate();
			
		</script><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:select1></td></tr></table></td></tr><tr class="document"><ix:attr value="if(cmsApprovalDocPresent = '1', '', 'display:none')" name="style"/><td class="component subcomponent  widenLabel "><table class="oneToManyBox"><tr><td class="label">CMS Approval Letter</td><td style="border:none;" class=""><span><ix:attr value="if(cmsApprovalDoc != '', '', 'display:none')" name="style"/><a target="_blank_"><ix:attr value="cmsApprovalDoc/@uri" name="href"/><xf:output class="" value="cmsApprovalDoc"/></a></span><span class="clickable"><ix:attr value="if(cmsApprovalDoc != '', 'display:none', '')" name="style"/><script ev:event="click"> 
                var key = model.getValue("@id", contextNode);
                
                  model.Frm.DOC_NEW_STATUS = "New";            /////////
                  model.Frm.DOC_NEW_DECISION = "Pending";      /////////
                  //model.Frm.DOC_REFRESHSECTION= "cmsApprovalDoc";
                  //////////////////////////////////////////////////////
                  model.Frm.docUpload.manualLabel = "CMS Approval Letter";
                              
                model.Frm.configureDocUpload("replaceValue", "instance('ins')/Device[@id='" + key + "']/cmsApprovalDoc", "", "", event.uiEvent.clientX, event.uiEvent.clientY);
                model.Frm.executeDocUpload(); 
              </script> 
              Attach <img src="../fil/system/resources/ideate/imgs/dialogGraphic.png"/></span></td><td class="control"><span style="" class="dialogOverInteractive clickable"><ix:attr value="if(cmsApprovalDoc != '', '', 'display:none')" name="style"/>Replace
                <script ev:event="click">
                  //required because this needs to be set for us to replicate the attachment page functionality (re: calling addDocSafe, etc.)
                  if(model.Frm.formSet.getRoot().__AMND){
                    model.Frm.loadOpFile('dat', model.Frm.formSet.getRoot().__COMPREVURI, "1");
                    model.Frm.DOC_SRCDOC = model.Frm.linkedOpURI + model.Frm.formSet.getRoot().__COMPREVURI;
                  }else{
                    model.Frm.loadAppFile('dat', model.Frm.formSet.getRoot().__REVURI, "1");
                    model.Frm.DOC_SRCDOC = model.Frm.targetURI + model.Frm.formSet.getRoot().__REVURI;  //Need to replace docStack and docAdd in appForms/main.js
                  }
                  
                  //Modified so it could find the right childen element for the docLink based on the context - similar should work for repeaters
                  //var toChange = model.getValue("instance('')/cmsApprovalDoc/@docLink");
                  var toChange = model.getValue("cmsApprovalDoc/@docLink", contextNode);
                  //AB 01/27/2020 added below line to find the @id
                  var po = model.getValue("@id", contextNode);
                  //return;
                  
                  var docXpath = "document[@uid='"+toChange+"']";
                 
                  //alert("docXpath = " + docXpath);
                  model.Frm.OldDocComms = model.getValue("instance('ins')/" + docXpath + "/" + "@decisioncomments");
                  model.Frm.OldDocStatus = model.getValue("instance('ins')/" + docXpath + "/" + "@status");
                model.Frm.OldDocId = toChange;
                model.Frm.DOC_NEW_UPLOAD_OP = "newVersion"; //THIS FORCES THE UPLOAD TO ADD A NEW VERSION
                //AB 01/27/2020 added below to store doc path to update related system document once document node is replaced
                model.Frm.DOC_REFRESHSECTION = "cmsApprovalDoc"; 
                  model.Frm.DOC_DPATH = "instance('ins')/Device[@id='" + po + "']/cmsApprovalDoc"; 
                  model.Frm.configureEnhancedDocUpload("replaceValue",contextNode, "this.model.USA.docReplaced()", "", event.uiEvent.clientX, event.uiEvent.clientY, '');
                //model.Frm.configureEnhancedDocUpload("replaceValue",contextNode, "this.model.USA.docReplaced()", "", 0, 0, '');
                model.Frm.executeDocUpload();
                model.Frm.docUpload.dop = ""; //new
                model.Frm.docUpload.duid = toChange;
                model.activateCase("hide-Device");
                model.activateCase("show-Device");    
                </script></span></td></tr></table></td></tr><tr class="box"><ix:attr value="if(noCost = '0', '', 'display:none')" name="style"/><exf:variable value="$passedmarkupMode" name="markupMode"/><exf:variable value="$mode" name="mode"/><td class="subcomponent component textarea   widenLabel "><xf:textarea class="" ref="descCost"><xf:label>Detailed Information of Who Will Cover Costs and How Cost Level Was Determined</xf:label><xf:action ev:event="xforms-value-changed"><xf:setvalue ref="../@changed">-1</xf:setvalue><script>if(model.skipRebuild){return;};model.skipRebuild = true;model.USA.addChange();model.rebuild(); model.refresh();model.recalculate();model.USA.rebuildArea('main2');setTimeout(function(){model.skipRebuild = false}, 1000);</script></xf:action></xf:textarea></td></tr><tr class="instructions"><td colspan="4" class="subcomponent"><div><subcomponent type="instructions">
            If applicable, please attach the following documentation.
		</subcomponent></div></td></tr><tr class="instructions"><td colspan="4" class="subcomponent"><div><subcomponent type="instructions">
            If this is being done under an IDE, attach the sponsor protocol imprinted with the IDE number, written communication from the sponsor documenting the IDE number, or written communication from the FDA documenting the IDE number.
		</subcomponent></div></td></tr><tr class="document"><td class="component subcomponent  widenLabel "><table class="oneToManyBox"><tr><td class="label">FDA Device Assessment or Notification</td><td style="border:none;" class=""><span><ix:attr value="if(riskAssessDoc != '', '', 'display:none')" name="style"/><a target="_blank_"><ix:attr value="riskAssessDoc/@uri" name="href"/><xf:output class="" value="riskAssessDoc"/></a></span><span class="clickable"><ix:attr value="if(riskAssessDoc != '', 'display:none', '')" name="style"/><script ev:event="click"> 
                var key = model.getValue("@id", contextNode);
                
                  model.Frm.DOC_NEW_STATUS = "New";            /////////
                  model.Frm.DOC_NEW_DECISION = "Pending";      /////////
                  //model.Frm.DOC_REFRESHSECTION= "riskAssessDoc";
                  //////////////////////////////////////////////////////
                  model.Frm.docUpload.manualLabel = "Devices/IDE Document";
                              
                model.Frm.configureDocUpload("replaceValue", "instance('ins')/Device[@id='" + key + "']/riskAssessDoc", "", "", event.uiEvent.clientX, event.uiEvent.clientY);
                model.Frm.executeDocUpload(); 
              </script> 
              Attach <img src="../fil/system/resources/ideate/imgs/dialogGraphic.png"/></span></td><td class="control"><span style="" class="dialogOverInteractive clickable"><ix:attr value="if(riskAssessDoc != '', '', 'display:none')" name="style"/>Replace
                <script ev:event="click">
                  //required because this needs to be set for us to replicate the attachment page functionality (re: calling addDocSafe, etc.)
                  if(model.Frm.formSet.getRoot().__AMND){
                    model.Frm.loadOpFile('dat', model.Frm.formSet.getRoot().__COMPREVURI, "1");
                    model.Frm.DOC_SRCDOC = model.Frm.linkedOpURI + model.Frm.formSet.getRoot().__COMPREVURI;
                  }else{
                    model.Frm.loadAppFile('dat', model.Frm.formSet.getRoot().__REVURI, "1");
                    model.Frm.DOC_SRCDOC = model.Frm.targetURI + model.Frm.formSet.getRoot().__REVURI;  //Need to replace docStack and docAdd in appForms/main.js
                  }
                  
                  //Modified so it could find the right childen element for the docLink based on the context - similar should work for repeaters
                  //var toChange = model.getValue("instance('')/riskAssessDoc/@docLink");
                  var toChange = model.getValue("riskAssessDoc/@docLink", contextNode);
                  //AB 01/27/2020 added below line to find the @id
                  var po = model.getValue("@id", contextNode);
                  //return;
                  
                  var docXpath = "document[@uid='"+toChange+"']";
                 
                  //alert("docXpath = " + docXpath);
                  model.Frm.OldDocComms = model.getValue("instance('ins')/" + docXpath + "/" + "@decisioncomments");
                  model.Frm.OldDocStatus = model.getValue("instance('ins')/" + docXpath + "/" + "@status");
                model.Frm.OldDocId = toChange;
                model.Frm.DOC_NEW_UPLOAD_OP = "newVersion"; //THIS FORCES THE UPLOAD TO ADD A NEW VERSION
                //AB 01/27/2020 added below to store doc path to update related system document once document node is replaced
                model.Frm.DOC_REFRESHSECTION = "riskAssessDoc"; 
                  model.Frm.DOC_DPATH = "instance('ins')/Device[@id='" + po + "']/riskAssessDoc"; 
                  model.Frm.configureEnhancedDocUpload("replaceValue",contextNode, "this.model.USA.docReplaced()", "", event.uiEvent.clientX, event.uiEvent.clientY, '');
                //model.Frm.configureEnhancedDocUpload("replaceValue",contextNode, "this.model.USA.docReplaced()", "", 0, 0, '');
                model.Frm.executeDocUpload();
                model.Frm.docUpload.dop = ""; //new
                model.Frm.docUpload.duid = toChange;
                model.activateCase("hide-Device");
                model.activateCase("show-Device");    
                </script></span></td></tr></table></td></tr><tr class="instructions"><td colspan="4" class="subcomponent"><div><subcomponent type="instructions">
            If applicable, please attach the device brochure that includes the following. <br/>
			* Description of device and its use. <br/>
			* Reports of prior investigations with device. <br/>
			* Proposed investigational plan. <br/>
			* Participant selection criteria description. <br/>
			* Monitoring procedures. <br/>
		</subcomponent></div></td></tr><tr class="document"><td class="component subcomponent  widenLabel "><table class="oneToManyBox"><tr><td class="label">Device Brochure</td><td style="border:none;" class=""><span><ix:attr value="if(deviceBrochureDoc != '', '', 'display:none')" name="style"/><a target="_blank_"><ix:attr value="deviceBrochureDoc/@uri" name="href"/><xf:output class="" value="deviceBrochureDoc"/></a></span><span class="clickable"><ix:attr value="if(deviceBrochureDoc != '', 'display:none', '')" name="style"/><script ev:event="click"> 
                var key = model.getValue("@id", contextNode);
                
                  model.Frm.DOC_NEW_STATUS = "New";            /////////
                  model.Frm.DOC_NEW_DECISION = "Pending";      /////////
                  //model.Frm.DOC_REFRESHSECTION= "deviceBrochureDoc";
                  //////////////////////////////////////////////////////
                  model.Frm.docUpload.manualLabel = "Devices Brochure";
                              
                model.Frm.configureDocUpload("replaceValue", "instance('ins')/Device[@id='" + key + "']/deviceBrochureDoc", "", "", event.uiEvent.clientX, event.uiEvent.clientY);
                model.Frm.executeDocUpload(); 
              </script> 
              Attach <img src="../fil/system/resources/ideate/imgs/dialogGraphic.png"/></span></td><td class="control"><span style="" class="dialogOverInteractive clickable"><ix:attr value="if(deviceBrochureDoc != '', '', 'display:none')" name="style"/>Replace
                <script ev:event="click">
                  //required because this needs to be set for us to replicate the attachment page functionality (re: calling addDocSafe, etc.)
                  if(model.Frm.formSet.getRoot().__AMND){
                    model.Frm.loadOpFile('dat', model.Frm.formSet.getRoot().__COMPREVURI, "1");
                    model.Frm.DOC_SRCDOC = model.Frm.linkedOpURI + model.Frm.formSet.getRoot().__COMPREVURI;
                  }else{
                    model.Frm.loadAppFile('dat', model.Frm.formSet.getRoot().__REVURI, "1");
                    model.Frm.DOC_SRCDOC = model.Frm.targetURI + model.Frm.formSet.getRoot().__REVURI;  //Need to replace docStack and docAdd in appForms/main.js
                  }
                  
                  //Modified so it could find the right childen element for the docLink based on the context - similar should work for repeaters
                  //var toChange = model.getValue("instance('')/deviceBrochureDoc/@docLink");
                  var toChange = model.getValue("deviceBrochureDoc/@docLink", contextNode);
                  //AB 01/27/2020 added below line to find the @id
                  var po = model.getValue("@id", contextNode);
                  //return;
                  
                  var docXpath = "document[@uid='"+toChange+"']";
                 
                  //alert("docXpath = " + docXpath);
                  model.Frm.OldDocComms = model.getValue("instance('ins')/" + docXpath + "/" + "@decisioncomments");
                  model.Frm.OldDocStatus = model.getValue("instance('ins')/" + docXpath + "/" + "@status");
                model.Frm.OldDocId = toChange;
                model.Frm.DOC_NEW_UPLOAD_OP = "newVersion"; //THIS FORCES THE UPLOAD TO ADD A NEW VERSION
                //AB 01/27/2020 added below to store doc path to update related system document once document node is replaced
                model.Frm.DOC_REFRESHSECTION = "deviceBrochureDoc"; 
                  model.Frm.DOC_DPATH = "instance('ins')/Device[@id='" + po + "']/deviceBrochureDoc"; 
                  model.Frm.configureEnhancedDocUpload("replaceValue",contextNode, "this.model.USA.docReplaced()", "", event.uiEvent.clientX, event.uiEvent.clientY, '');
                //model.Frm.configureEnhancedDocUpload("replaceValue",contextNode, "this.model.USA.docReplaced()", "", 0, 0, '');
                model.Frm.executeDocUpload();
                model.Frm.docUpload.dop = ""; //new
                model.Frm.docUpload.duid = toChange;
                model.activateCase("hide-Device");
                model.activateCase("show-Device");    
                </script></span></td></tr></table></td></tr><tr class="document"><ix:attr value="if(instance('ins')/previouslySubmittedExternal = '1', '', 'display:none')" name="style"/><td class="component subcomponent  widenLabel "><table class="oneToManyBox"><tr><td class="label">Determinations Made by Other IRBs</td><td style="border:none;" class=""><span><ix:attr value="if(irbDetDoc != '', '', 'display:none')" name="style"/><a target="_blank_"><ix:attr value="irbDetDoc/@uri" name="href"/><xf:output class="" value="irbDetDoc"/></a></span><span class="clickable"><ix:attr value="if(irbDetDoc != '', 'display:none', '')" name="style"/><script ev:event="click"> 
                var key = model.getValue("@id", contextNode);
                
                  model.Frm.DOC_NEW_STATUS = "New";            /////////
                  model.Frm.DOC_NEW_DECISION = "Pending";      /////////
                  //model.Frm.DOC_REFRESHSECTION= "irbDetDoc";
                  //////////////////////////////////////////////////////
                  model.Frm.docUpload.manualLabel = "Devices/Determinations made by other IRBs";
                              
                model.Frm.configureDocUpload("replaceValue", "instance('ins')/Device[@id='" + key + "']/irbDetDoc", "", "", event.uiEvent.clientX, event.uiEvent.clientY);
                model.Frm.executeDocUpload(); 
              </script> 
              Attach <img src="../fil/system/resources/ideate/imgs/dialogGraphic.png"/></span></td><td class="control"><span style="" class="dialogOverInteractive clickable"><ix:attr value="if(irbDetDoc != '', '', 'display:none')" name="style"/>Replace
                <script ev:event="click">
                  //required because this needs to be set for us to replicate the attachment page functionality (re: calling addDocSafe, etc.)
                  if(model.Frm.formSet.getRoot().__AMND){
                    model.Frm.loadOpFile('dat', model.Frm.formSet.getRoot().__COMPREVURI, "1");
                    model.Frm.DOC_SRCDOC = model.Frm.linkedOpURI + model.Frm.formSet.getRoot().__COMPREVURI;
                  }else{
                    model.Frm.loadAppFile('dat', model.Frm.formSet.getRoot().__REVURI, "1");
                    model.Frm.DOC_SRCDOC = model.Frm.targetURI + model.Frm.formSet.getRoot().__REVURI;  //Need to replace docStack and docAdd in appForms/main.js
                  }
                  
                  //Modified so it could find the right childen element for the docLink based on the context - similar should work for repeaters
                  //var toChange = model.getValue("instance('')/irbDetDoc/@docLink");
                  var toChange = model.getValue("irbDetDoc/@docLink", contextNode);
                  //AB 01/27/2020 added below line to find the @id
                  var po = model.getValue("@id", contextNode);
                  //return;
                  
                  var docXpath = "document[@uid='"+toChange+"']";
                 
                  //alert("docXpath = " + docXpath);
                  model.Frm.OldDocComms = model.getValue("instance('ins')/" + docXpath + "/" + "@decisioncomments");
                  model.Frm.OldDocStatus = model.getValue("instance('ins')/" + docXpath + "/" + "@status");
                model.Frm.OldDocId = toChange;
                model.Frm.DOC_NEW_UPLOAD_OP = "newVersion"; //THIS FORCES THE UPLOAD TO ADD A NEW VERSION
                //AB 01/27/2020 added below to store doc path to update related system document once document node is replaced
                model.Frm.DOC_REFRESHSECTION = "irbDetDoc"; 
                  model.Frm.DOC_DPATH = "instance('ins')/Device[@id='" + po + "']/irbDetDoc"; 
                  model.Frm.configureEnhancedDocUpload("replaceValue",contextNode, "this.model.USA.docReplaced()", "", event.uiEvent.clientX, event.uiEvent.clientY, '');
                //model.Frm.configureEnhancedDocUpload("replaceValue",contextNode, "this.model.USA.docReplaced()", "", 0, 0, '');
                model.Frm.executeDocUpload();
                model.Frm.docUpload.dop = ""; //new
                model.Frm.docUpload.duid = toChange;
                model.activateCase("hide-Device");
                model.activateCase("show-Device");    
                </script></span></td></tr></table></td></tr><tr class="break"><td><br/></td></tr><tr class="repeaterDeleteLine"><td colspan="3"><u class="clickable">Delete Record<xf:action exf:if="script('confirm(&quot;Are you sure you want to delete this device?&quot;)')" ev:event="click"><xf:destroy ref="."/><script>model.USA.removeMSSMDevice(["main2"], model.getValue("@ref", contextNode), contextNode);</script></xf:action></u></td></tr></table></td><td class="errors custError"><exf:variable value="@id" name="rowIndex"/><exf:variable value="concat(.,'')" name="theCurrentValue"/><exf:variable value="@id" name="nsXMLKEY"/><exf:variable value="concat(instance('ins')/original/Device[@id=$nsXMLKEY]/.,'')" name="thePreviousValue"/><exf:variable value="concat(instance('ins')/suggestions/Device[@id=$nsXMLKEY]/.,'')" name="theSuggestedValue"/><exf:variable value="concat(instance('ins')/previous/review/original/Device[@id=$nsXMLKEY]/.,'')" name="thePreviousOrgValue"/><exf:variable value="instance('ins')/previous/review/Device[@id=$nsXMLKEY]" name="thisNodeNeedleOld"/><div><ix:attr value="if($thisNodeNeedleOld/@comment!='', '', 'display:none')" name="style"/><span class="dialogOverInteractive"><u style="color:blue"><nobr>Previous Comment</nobr></u><div style="width:300px;"><p><h5>Comment:</h5><span style="color:black"><xf:output value="$thisNodeNeedleOld/@comment"/></span></p></div></span></div><div><ix:attr value="if($theCurrentValue != $thePreviousOrgValue, '', 'display:none')" name="style"/><span class="dialogOverInteractive"><u style="color:red">New Value Provided</u></span></div><div><xf:select ref="@addcomment"><xf:item><xf:label><nobr>Add Comment</nobr></xf:label><xf:value>1</xf:value></xf:item><script ev:event="xforms-value-changed">
					cnged = model.getValue("../@changed", contextNode);                            
					com = model.getValue(".", contextNode);
					if(!cnged &amp;&amp; !com) model.USA.removeChange();
					if(!cnged &amp;&amp; com) model.USA.addChange();
					if(!com) model.setValue("../@comment","",contextNode);
					model.recalculate();
			  </script></xf:select><div><ix:attr value="if(@addcomment='1', 'margin-top:-10px;', 'display:none')" name="style"/><xf:textarea ref="@comment"/></div></div><div><ix:attr value="if(@officeComm !='' and script('model.__XformSet.getRoot().model.hideOfficeComments') * 1 != 1, '', 'display:none')" name="style"/><span class="dialogOverInteractive"><u style="color:blue">Office Comment</u><div style="width:300px;"><p><span style="color:black"><h5>Office Comments:</h5><xf:output value="@officeComm"/></span></p></div></span><br/><br/></div></td></tr></table></xf:repeat></xf:case><xf:case id="hide-main2"/></xf:switch></td></tr><tr class="repeaterButton button"><td class="component"><xf:trigger><xf:label>Add New Device</xf:label><xf:action ev:event="DOMActivate"><script>
               params={revIndex:""};
               
               
                 var ndID = model.getValue("instance('ins')/*[last()]/@revIndex", null) * 1;
                 params.revIndex = ndID + 1;
                 
               if(params){
               SH.print("params");
               }
               
			model.USA.addMSSMDevice(["main2"],params);
		</script></xf:action></xf:trigger></td></tr></table></div></div><div class="bottomNav"><table><tr><td class="back"><div class="nav" style="float:right"><script ev:event="click">
                    model.Frm.navigateTo("previousTab");
                  </script><div style="float:left" class="command">previous</div><img style="float:right" src="../fil/system/resources/ideate/imgs/left.png"/></div></td><td class="next"><div class="nav" style="float:left"><script ev:event="click">
                    model.Frm.navigateTo("nextTab");
                  </script><img style="float:left" src="../fil/system/resources/ideate/imgs/right.png"/><div style="float:right" class="command">next</div></div></td></tr></table><div style="text-align:center; font-size:10px;margin-top:30px;">© <xf:output value="script('copywrite(2012)')"/></div></div></form>